# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from deel_python_sdk.pydantic.date_time_string import DateTimeString
from deel_python_sdk.pydantic.date_time_string_nullable import DateTimeStringNullable
from deel_python_sdk.pydantic.timeoffs_attachments_nullable import TimeoffsAttachmentsNullable
from deel_python_sdk.pydantic.timeoffs_profile import TimeoffsProfile
from deel_python_sdk.pydantic.timeoffs_profile_nullable import TimeoffsProfileNullable
from deel_python_sdk.pydantic.timeoffs_status_enum import TimeoffsStatusEnum
from deel_python_sdk.pydantic.timeoffs_type_enum import TimeoffsTypeEnum

class EorTimeoffsBaseItem(BaseModel):
    # The type of time off.
    type: TimeoffsTypeEnum = Field(alias='type')

    # Timestamp when time off was requested.
    requested_at: DateTimeString = Field(alias='requested_at')

    # Status of the time off request.
    status: TimeoffsStatusEnum = Field(alias='status')

    # Reason for requesting time off.
    reason: typing.Optional[typing.Optional[str]] = Field(None, alias='reason')

    # Timestamp when time off was reviewed.
    reviewed_at: typing.Optional[DateTimeStringNullable] = Field(None, alias='reviewed_at')

    # Reason why time off was denied.
    denial_reason: typing.Optional[typing.Optional[str]] = Field(None, alias='denial_reason')

    # Indicates if multiple time off days are requested.
    has_multiple_dates: typing.Optional[typing.Optional[bool]] = Field(None, alias='has_multiple_dates')

    # Custom title for the time off. Only specify if type is \"OTHER\".
    other_timeoff_name: typing.Optional[typing.Optional[str]] = Field(None, alias='other_timeoff_name')

    # Employee who requested the time off.
    requester: typing.Optional[TimeoffsProfileNullable] = Field(None, alias='requester')

    # User who reviewed the time off.
    reviewer: typing.Optional[TimeoffsProfile] = Field(None, alias='reviewer')

    # Days used at the start year.
    days_used_start_year: typing.Optional[str] = Field(None, alias='days_used_start_year')

    # Days used at the end year.
    days_used_end_year: typing.Optional[str] = Field(None, alias='days_used_end_year')

    # Total number of time off days used.
    total_days_used: typing.Optional[str] = Field(None, alias='total_days_used')

    # Indicates if the first day of time off is a half day.
    start_date_is_half_day: typing.Optional[bool] = Field(None, alias='start_date_is_half_day')

    # Indicates if the last day of time off is a half day.
    end_date_is_half_day: typing.Optional[bool] = Field(None, alias='end_date_is_half_day')

    single_date: typing.Optional[DateTimeString] = Field(None, alias='single_date')

    # If true, only a single date was specified.
    date_is_half_day: typing.Optional[typing.Optional[bool]] = Field(None, alias='date_is_half_day')

    attachments: typing.Optional[TimeoffsAttachmentsNullable] = Field(None, alias='attachments')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
