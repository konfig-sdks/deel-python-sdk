# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from deel_python_sdk.pydantic.people_client_legal_entity import PeopleClientLegalEntity
from deel_python_sdk.pydantic.people_payment import PeoplePayment
from deel_python_sdk.pydantic.team import Team

class Employment(BaseModel):
    # Unique identifier for the employment.
    id: typing.Optional[str] = Field(None, alias='id')

    # The name of the employment.
    name: typing.Optional[str] = Field(None, alias='name')

    team: typing.Optional[Team] = Field(None, alias='team')

    # The email associated with the employment.
    email: typing.Optional[str] = Field(None, alias='email')

    # The state associated with the employment.
    state: typing.Optional[str] = Field(None, alias='state')

    # The country associated with the employment.
    country: typing.Optional[str] = Field(None, alias='country')

    payment: typing.Optional[PeoplePayment] = Field(None, alias='payment')

    # Indicates whether the employment has ended.
    is_ended: typing.Optional[bool] = Field(None, alias='is_ended')

    # The timezone associated with the employment.
    timezone: typing.Optional[str] = Field(None, alias='timezone')

    # The job title associated with the employment.
    job_title: typing.Optional[str] = Field(None, alias='job_title')

    # The seniority level associated with the employment.
    seniority: typing.Optional[str] = Field(None, alias='seniority')

    # The start date of the employment.
    start_date: typing.Optional[str] = Field(None, alias='start_date')

    # The work email associated with the employment.
    work_email: typing.Optional[str] = Field(None, alias='work_email')

    # The hiring type associated with the employment.
    hiring_type: typing.Optional[str] = Field(None, alias='hiring_type')

    # The hiring status associated with the employment.
    hiring_status: typing.Optional[str] = Field(None, alias='hiring_status')

    # The completion date of the employment.
    completion_date: typing.Optional[str] = Field(None, alias='completion_date')

    # The contract status associated with the employment.
    contract_status: typing.Optional[str] = Field(None, alias='contract_status')

    # Indicates whether the employment was left voluntarily.
    voluntarily_left: typing.Optional[bool] = Field(None, alias='voluntarily_left')

    client_legal_entity: typing.Optional[PeopleClientLegalEntity] = Field(None, alias='client_legal_entity')

    # Indicates whether the employment had an EOR termination.
    has_eor_termination: typing.Optional[bool] = Field(None, alias='has_eor_termination')

    # Indicates whether the employment's contract is archived.
    contract_is_archived: typing.Optional[bool] = Field(None, alias='contract_is_archived')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
