# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from deel_python_sdk.pydantic.currency_code_required import CurrencyCodeRequired
from deel_python_sdk.pydantic.date_string_required import DateStringRequired
from deel_python_sdk.pydantic.work_statement_cycle_end_type_enum import WorkStatementCycleEndTypeEnum
from deel_python_sdk.pydantic.work_statement_cycle_scale_enum import WorkStatementCycleScaleEnum
from deel_python_sdk.pydantic.work_statement_payment_due_type_enum import WorkStatementPaymentDueTypeEnum
from deel_python_sdk.pydantic.work_statement_scale_enum import WorkStatementScaleEnum

class ContractDetailsToAmend(BaseModel):
    amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='amount')

    currency_code: typing.Optional[CurrencyCodeRequired] = Field(None, alias='currency_code')

    scale: typing.Optional[WorkStatementScaleEnum] = Field(None, alias='scale')

    effective_date: typing.Optional[DateStringRequired] = Field(None, alias='effective_date')

    first_payment_date: typing.Optional[DateStringRequired] = Field(None, alias='first_payment_date')

    first_payment: typing.Optional[typing.Union[int, float]] = Field(None, alias='first_payment')

    frequency: typing.Optional[WorkStatementCycleScaleEnum] = Field(None, alias='frequency')

    cycle_end: typing.Optional[typing.Union[int, float]] = Field(None, alias='cycle_end')

    cycle_end_type: typing.Optional[WorkStatementCycleEndTypeEnum] = Field(None, alias='cycle_end_type')

    payment_due_type: typing.Optional[WorkStatementPaymentDueTypeEnum] = Field(None, alias='payment_due_type')

    payment_due_days: typing.Optional[typing.Union[int, float]] = Field(None, alias='payment_due_days')

    # If the payment due is on a weekend, pay on Friday.
    pay_before_weekends: typing.Optional[bool] = Field(None, alias='pay_before_weekends')

    # You can enter new job title.
    job_title_name: typing.Optional[str] = Field(None, alias='job_title_name')

    # Unique identifier of this resource.
    job_title_id: typing.Optional[str] = Field(None, alias='job_title_id')

    # Unique identifier of this resource.
    seniority_id: typing.Optional[str] = Field(None, alias='seniority_id')

    # Text to describe any special clause in contract.
    special_clause: typing.Optional[str] = Field(None, alias='special_clause')

    # Text to describe the scope of work of the contract.
    scope_of_work: typing.Optional[str] = Field(None, alias='scope_of_work')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
