# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from deel_python_sdk.pydantic.contract_to_create_shared_client import ContractToCreateSharedClient
from deel_python_sdk.pydantic.contract_to_create_shared_job_title import ContractToCreateSharedJobTitle
from deel_python_sdk.pydantic.contract_to_create_shared_seniority import ContractToCreateSharedSeniority
from deel_python_sdk.pydantic.contract_to_create_shared_worker import ContractToCreateSharedWorker
from deel_python_sdk.pydantic.contract_who_reports_enum import ContractWhoReportsEnum
from deel_python_sdk.pydantic.country_code import CountryCode
from deel_python_sdk.pydantic.date_string import DateString
from deel_python_sdk.pydantic.meta_data_of_contract_to_create import MetaDataOfContractToCreate
from deel_python_sdk.pydantic.notice_period import NoticePeriod

class ContractToCreateShared(BaseModel):
    # The title of the contract.
    title: str = Field(alias='title')

    client: ContractToCreateSharedClient = Field(alias='client')

    job_title: ContractToCreateSharedJobTitle = Field(alias='job_title')

    meta: MetaDataOfContractToCreate = Field(alias='meta')

    country_code: typing.Optional[CountryCode] = Field(None, alias='country_code')

    # The state or province code. Use country lookup endpoint to retrieve state codes.
    state_code: typing.Optional[typing.Optional[str]] = Field(None, alias='state_code')

    # Describe the work to be performed.
    scope_of_work: typing.Optional[typing.Optional[str]] = Field(None, alias='scope_of_work')

    # Enter any special clause you may have.
    special_clause: typing.Optional[typing.Optional[str]] = Field(None, alias='special_clause')

    termination_date: typing.Optional[DateString] = Field(None, alias='termination_date')

    seniority: typing.Optional[ContractToCreateSharedSeniority] = Field(None, alias='seniority')

    notice_period: typing.Optional[NoticePeriod] = Field(None, alias='notice_period')

    who_reports: typing.Optional[ContractWhoReportsEnum] = Field(None, alias='who_reports')

    # External Id.
    external_id: typing.Optional[typing.Optional[str]] = Field(None, alias='external_id')

    worker: typing.Optional[ContractToCreateSharedWorker] = Field(None, alias='worker')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
