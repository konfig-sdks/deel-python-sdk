# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class WorkerOfBasicContract(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "full_name",
            "id",
            "email",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class full_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def email() -> typing.Type['EmailType']:
                return EmailType
        
            @staticmethod
            def alternate_email() -> typing.Type['AlternateEmailList']:
                return AlternateEmailList
        
            @staticmethod
            def image() -> typing.Type['UrlType']:
                return UrlType
            __annotations__ = {
                "id": id,
                "full_name": full_name,
                "email": email,
                "alternate_email": alternate_email,
                "image": image,
            }

    
    full_name: MetaOapg.properties.full_name
    id: MetaOapg.properties.id
    email: 'EmailType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'EmailType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternate_email"]) -> 'AlternateEmailList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'UrlType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "full_name", "email", "alternate_email", "image", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> 'EmailType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternate_email"]) -> typing.Union['AlternateEmailList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['UrlType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "full_name", "email", "alternate_email", "image", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        alternate_email: typing.Union['AlternateEmailList', schemas.Unset] = schemas.unset,
        image: typing.Union['UrlType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkerOfBasicContract':
        return super().__new__(
            cls,
            *args,
            alternate_email=alternate_email,
            image=image,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.alternate_email_list import AlternateEmailList
from deel_python_sdk.model.email_type import EmailType
from deel_python_sdk.model.url_type import UrlType
