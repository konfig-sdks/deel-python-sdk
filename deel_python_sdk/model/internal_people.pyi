# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class InternalPeople(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    People object representing a Deel
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
            full_name = schemas.StrSchema
            email = schemas.StrSchema
            work_email = schemas.StrSchema
            personal_email = schemas.StrSchema
            country_name = schemas.StrSchema
            birth_date = schemas.StrSchema
            pic_url = schemas.StrSchema
            start_date = schemas.StrSchema
            
            
            class payments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Payment']:
                        return Payment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Payment'], typing.List['Payment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Payment':
                    return super().__getitem__(i)
            hourly_report_total = schemas.StrSchema
        
            @staticmethod
            def client_legal_entity() -> typing.Type['PeopleClientLegalEntity']:
                return PeopleClientLegalEntity
            state = schemas.StrSchema
            seniority = schemas.StrSchema
            completion_date = schemas.StrSchema
        
            @staticmethod
            def monthly_payment() -> typing.Type['MonthlyPayment']:
                return MonthlyPayment
            direct_manager = schemas.StrSchema
            direct_reports = schemas.StrSchema
            direct_reports_count = schemas.IntSchema
            
            
            class employments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Employment']:
                        return Employment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Employment'], typing.List['Employment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Employment':
                    return super().__getitem__(i)
            hiring_status = schemas.StrSchema
            hiring_type = schemas.StrSchema
            job_title = schemas.StrSchema
            country = schemas.StrSchema
            team_id = schemas.IntSchema
            team = schemas.StrSchema
            timezone = schemas.StrSchema
            department = schemas.StrSchema
            work_location = schemas.StrSchema
        
            @staticmethod
            def contract_types() -> typing.Type['InternalPeopleContractTypes']:
                return InternalPeopleContractTypes
            has_deel_user = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "first_name": first_name,
                "last_name": last_name,
                "full_name": full_name,
                "email": email,
                "work_email": work_email,
                "personal_email": personal_email,
                "country_name": country_name,
                "birth_date": birth_date,
                "pic_url": pic_url,
                "start_date": start_date,
                "payments": payments,
                "hourly_report_total": hourly_report_total,
                "client_legal_entity": client_legal_entity,
                "state": state,
                "seniority": seniority,
                "completion_date": completion_date,
                "monthly_payment": monthly_payment,
                "direct_manager": direct_manager,
                "direct_reports": direct_reports,
                "direct_reports_count": direct_reports_count,
                "employments": employments,
                "hiring_status": hiring_status,
                "hiring_type": hiring_type,
                "job_title": job_title,
                "country": country,
                "team_id": team_id,
                "team": team,
                "timezone": timezone,
                "department": department,
                "work_location": work_location,
                "contract_types": contract_types,
                "has_deel_user": has_deel_user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_email"]) -> MetaOapg.properties.work_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pic_url"]) -> MetaOapg.properties.pic_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments"]) -> MetaOapg.properties.payments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_report_total"]) -> MetaOapg.properties.hourly_report_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_legal_entity"]) -> 'PeopleClientLegalEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seniority"]) -> MetaOapg.properties.seniority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_date"]) -> MetaOapg.properties.completion_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_payment"]) -> 'MonthlyPayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_manager"]) -> MetaOapg.properties.direct_manager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_reports"]) -> MetaOapg.properties.direct_reports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_reports_count"]) -> MetaOapg.properties.direct_reports_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employments"]) -> MetaOapg.properties.employments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_status"]) -> MetaOapg.properties.hiring_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_type"]) -> MetaOapg.properties.hiring_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_location"]) -> MetaOapg.properties.work_location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_types"]) -> 'InternalPeopleContractTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_deel_user"]) -> MetaOapg.properties.has_deel_user: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "full_name", "email", "work_email", "personal_email", "country_name", "birth_date", "pic_url", "start_date", "payments", "hourly_report_total", "client_legal_entity", "state", "seniority", "completion_date", "monthly_payment", "direct_manager", "direct_reports", "direct_reports_count", "employments", "hiring_status", "hiring_type", "job_title", "country", "team_id", "team", "timezone", "department", "work_location", "contract_types", "has_deel_user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_email"]) -> typing.Union[MetaOapg.properties.work_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_email"]) -> typing.Union[MetaOapg.properties.personal_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union[MetaOapg.properties.birth_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pic_url"]) -> typing.Union[MetaOapg.properties.pic_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments"]) -> typing.Union[MetaOapg.properties.payments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_report_total"]) -> typing.Union[MetaOapg.properties.hourly_report_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_legal_entity"]) -> typing.Union['PeopleClientLegalEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seniority"]) -> typing.Union[MetaOapg.properties.seniority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_date"]) -> typing.Union[MetaOapg.properties.completion_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_payment"]) -> typing.Union['MonthlyPayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_manager"]) -> typing.Union[MetaOapg.properties.direct_manager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_reports"]) -> typing.Union[MetaOapg.properties.direct_reports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_reports_count"]) -> typing.Union[MetaOapg.properties.direct_reports_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employments"]) -> typing.Union[MetaOapg.properties.employments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_status"]) -> typing.Union[MetaOapg.properties.hiring_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_type"]) -> typing.Union[MetaOapg.properties.hiring_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> typing.Union[MetaOapg.properties.team_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union[MetaOapg.properties.team, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_location"]) -> typing.Union[MetaOapg.properties.work_location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_types"]) -> typing.Union['InternalPeopleContractTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_deel_user"]) -> typing.Union[MetaOapg.properties.has_deel_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "full_name", "email", "work_email", "personal_email", "country_name", "birth_date", "pic_url", "start_date", "payments", "hourly_report_total", "client_legal_entity", "state", "seniority", "completion_date", "monthly_payment", "direct_manager", "direct_reports", "direct_reports_count", "employments", "hiring_status", "hiring_type", "job_title", "country", "team_id", "team", "timezone", "department", "work_location", "contract_types", "has_deel_user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        work_email: typing.Union[MetaOapg.properties.work_email, str, schemas.Unset] = schemas.unset,
        personal_email: typing.Union[MetaOapg.properties.personal_email, str, schemas.Unset] = schemas.unset,
        country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
        birth_date: typing.Union[MetaOapg.properties.birth_date, str, schemas.Unset] = schemas.unset,
        pic_url: typing.Union[MetaOapg.properties.pic_url, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        payments: typing.Union[MetaOapg.properties.payments, list, tuple, schemas.Unset] = schemas.unset,
        hourly_report_total: typing.Union[MetaOapg.properties.hourly_report_total, str, schemas.Unset] = schemas.unset,
        client_legal_entity: typing.Union['PeopleClientLegalEntity', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        seniority: typing.Union[MetaOapg.properties.seniority, str, schemas.Unset] = schemas.unset,
        completion_date: typing.Union[MetaOapg.properties.completion_date, str, schemas.Unset] = schemas.unset,
        monthly_payment: typing.Union['MonthlyPayment', schemas.Unset] = schemas.unset,
        direct_manager: typing.Union[MetaOapg.properties.direct_manager, str, schemas.Unset] = schemas.unset,
        direct_reports: typing.Union[MetaOapg.properties.direct_reports, str, schemas.Unset] = schemas.unset,
        direct_reports_count: typing.Union[MetaOapg.properties.direct_reports_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employments: typing.Union[MetaOapg.properties.employments, list, tuple, schemas.Unset] = schemas.unset,
        hiring_status: typing.Union[MetaOapg.properties.hiring_status, str, schemas.Unset] = schemas.unset,
        hiring_type: typing.Union[MetaOapg.properties.hiring_type, str, schemas.Unset] = schemas.unset,
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        team_id: typing.Union[MetaOapg.properties.team_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        team: typing.Union[MetaOapg.properties.team, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, str, schemas.Unset] = schemas.unset,
        work_location: typing.Union[MetaOapg.properties.work_location, str, schemas.Unset] = schemas.unset,
        contract_types: typing.Union['InternalPeopleContractTypes', schemas.Unset] = schemas.unset,
        has_deel_user: typing.Union[MetaOapg.properties.has_deel_user, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InternalPeople':
        return super().__new__(
            cls,
            *args,
            id=id,
            first_name=first_name,
            last_name=last_name,
            full_name=full_name,
            email=email,
            work_email=work_email,
            personal_email=personal_email,
            country_name=country_name,
            birth_date=birth_date,
            pic_url=pic_url,
            start_date=start_date,
            payments=payments,
            hourly_report_total=hourly_report_total,
            client_legal_entity=client_legal_entity,
            state=state,
            seniority=seniority,
            completion_date=completion_date,
            monthly_payment=monthly_payment,
            direct_manager=direct_manager,
            direct_reports=direct_reports,
            direct_reports_count=direct_reports_count,
            employments=employments,
            hiring_status=hiring_status,
            hiring_type=hiring_type,
            job_title=job_title,
            country=country,
            team_id=team_id,
            team=team,
            timezone=timezone,
            department=department,
            work_location=work_location,
            contract_types=contract_types,
            has_deel_user=has_deel_user,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.employment import Employment
from deel_python_sdk.model.internal_people_contract_types import InternalPeopleContractTypes
from deel_python_sdk.model.monthly_payment import MonthlyPayment
from deel_python_sdk.model.payment import Payment
from deel_python_sdk.model.people_client_legal_entity import PeopleClientLegalEntity
