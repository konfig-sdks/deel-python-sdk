# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorContractToCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "client",
            "compensation_details",
            "employment",
            "employee",
            "job_title",
            "seniority",
        }
        
        class properties:
        
            @staticmethod
            def employee() -> typing.Type['EorContractToCreateEmployee']:
                return EorContractToCreateEmployee
        
            @staticmethod
            def employment() -> typing.Type['EorContractToCreateEmployment']:
                return EorContractToCreateEmployment
            job_title = schemas.StrSchema
        
            @staticmethod
            def seniority() -> typing.Type['EorContractToCreateSeniority']:
                return EorContractToCreateSeniority
        
            @staticmethod
            def client() -> typing.Type['EorContractToCreateClient']:
                return EorContractToCreateClient
        
            @staticmethod
            def compensation_details() -> typing.Type['EorContractToCreateCompensationDetails']:
                return EorContractToCreateCompensationDetails
        
            @staticmethod
            def quote_additional_fields() -> typing.Type['EorContractToCreateQuoteAdditionalFields']:
                return EorContractToCreateQuoteAdditionalFields
            health_plan_id = schemas.StrSchema
        
            @staticmethod
            def pension() -> typing.Type['PensionEORContractToCreate']:
                return PensionEORContractToCreate
            __annotations__ = {
                "employee": employee,
                "employment": employment,
                "job_title": job_title,
                "seniority": seniority,
                "client": client,
                "compensation_details": compensation_details,
                "quote_additional_fields": quote_additional_fields,
                "health_plan_id": health_plan_id,
                "pension": pension,
            }
    
    client: 'EorContractToCreateClient'
    compensation_details: 'EorContractToCreateCompensationDetails'
    employment: 'EorContractToCreateEmployment'
    employee: 'EorContractToCreateEmployee'
    job_title: MetaOapg.properties.job_title
    seniority: 'EorContractToCreateSeniority'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'EorContractToCreateEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> 'EorContractToCreateEmployment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seniority"]) -> 'EorContractToCreateSeniority': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'EorContractToCreateClient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensation_details"]) -> 'EorContractToCreateCompensationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote_additional_fields"]) -> 'EorContractToCreateQuoteAdditionalFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["health_plan_id"]) -> MetaOapg.properties.health_plan_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pension"]) -> 'PensionEORContractToCreate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee", "employment", "job_title", "seniority", "client", "compensation_details", "quote_additional_fields", "health_plan_id", "pension", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> 'EorContractToCreateEmployee': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> 'EorContractToCreateEmployment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seniority"]) -> 'EorContractToCreateSeniority': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> 'EorContractToCreateClient': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensation_details"]) -> 'EorContractToCreateCompensationDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote_additional_fields"]) -> typing.Union['EorContractToCreateQuoteAdditionalFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["health_plan_id"]) -> typing.Union[MetaOapg.properties.health_plan_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pension"]) -> typing.Union['PensionEORContractToCreate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee", "employment", "job_title", "seniority", "client", "compensation_details", "quote_additional_fields", "health_plan_id", "pension", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        client: 'EorContractToCreateClient',
        compensation_details: 'EorContractToCreateCompensationDetails',
        employment: 'EorContractToCreateEmployment',
        employee: 'EorContractToCreateEmployee',
        job_title: typing.Union[MetaOapg.properties.job_title, str, ],
        seniority: 'EorContractToCreateSeniority',
        quote_additional_fields: typing.Union['EorContractToCreateQuoteAdditionalFields', schemas.Unset] = schemas.unset,
        health_plan_id: typing.Union[MetaOapg.properties.health_plan_id, str, schemas.Unset] = schemas.unset,
        pension: typing.Union['PensionEORContractToCreate', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorContractToCreate':
        return super().__new__(
            cls,
            *args,
            client=client,
            compensation_details=compensation_details,
            employment=employment,
            employee=employee,
            job_title=job_title,
            seniority=seniority,
            quote_additional_fields=quote_additional_fields,
            health_plan_id=health_plan_id,
            pension=pension,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_contract_to_create_client import EorContractToCreateClient
from deel_python_sdk.model.eor_contract_to_create_compensation_details import EorContractToCreateCompensationDetails
from deel_python_sdk.model.eor_contract_to_create_employee import EorContractToCreateEmployee
from deel_python_sdk.model.eor_contract_to_create_employment import EorContractToCreateEmployment
from deel_python_sdk.model.eor_contract_to_create_quote_additional_fields import EorContractToCreateQuoteAdditionalFields
from deel_python_sdk.model.eor_contract_to_create_seniority import EorContractToCreateSeniority
from deel_python_sdk.model.pension_eor_contract_to_create import PensionEORContractToCreate
