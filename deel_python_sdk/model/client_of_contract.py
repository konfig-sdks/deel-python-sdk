# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class ClientOfContract(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "legal_entity",
            "team",
        }
        
        class properties:
        
            @staticmethod
            def team() -> typing.Type['TeamOfContract']:
                return TeamOfContract
        
            @staticmethod
            def legal_entity() -> typing.Type['ClientLegalEntity']:
                return ClientLegalEntity
            id = schemas.StrSchema
            full_name = schemas.StrSchema
        
            @staticmethod
            def email() -> typing.Type['EmailType']:
                return EmailType
            __annotations__ = {
                "team": team,
                "legal_entity": legal_entity,
                "id": id,
                "full_name": full_name,
                "email": email,
            }

    
    legal_entity: 'ClientLegalEntity'
    team: 'TeamOfContract'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'TeamOfContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_entity"]) -> 'ClientLegalEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'EmailType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["team", "legal_entity", "id", "full_name", "email", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'TeamOfContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_entity"]) -> 'ClientLegalEntity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['EmailType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["team", "legal_entity", "id", "full_name", "email", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        email: typing.Union['EmailType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientOfContract':
        return super().__new__(
            cls,
            *args,
            id=id,
            full_name=full_name,
            email=email,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.client_legal_entity import ClientLegalEntity
from deel_python_sdk.model.email_type import EmailType
from deel_python_sdk.model.team_of_contract import TeamOfContract
