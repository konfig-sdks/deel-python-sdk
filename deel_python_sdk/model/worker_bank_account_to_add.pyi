# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class WorkerBankAccountToAdd(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            full_name = schemas.StrSchema
            phone = schemas.StrSchema
            address_line1 = schemas.StrSchema
            address_line2 = schemas.StrSchema
            city = schemas.StrSchema
            province_state = schemas.StrSchema
            postal = schemas.StrSchema
            bank_name = schemas.StrSchema
            country_code = schemas.StrSchema
            bank_country_code = schemas.StrSchema
            swift_bic = schemas.StrSchema
            account_number = schemas.StrSchema
            bank_code = schemas.StrSchema
            original_name = schemas.StrSchema
            tax_id = schemas.StrSchema
            branch_code = schemas.StrSchema
            currency_code = schemas.StrSchema
            bank_branch_name = schemas.StrSchema
            iban = schemas.StrSchema
            email = schemas.StrSchema
            rib_number = schemas.StrSchema
            account_type = schemas.StrSchema
            ach_routing_number = schemas.StrSchema
            __annotations__ = {
                "full_name": full_name,
                "phone": phone,
                "address_line1": address_line1,
                "address_line2": address_line2,
                "city": city,
                "province_state": province_state,
                "postal": postal,
                "bank_name": bank_name,
                "country_code": country_code,
                "bank_country_code": bank_country_code,
                "swift_bic": swift_bic,
                "account_number": account_number,
                "bank_code": bank_code,
                "original_name": original_name,
                "tax_id": tax_id,
                "branch_code": branch_code,
                "currency_code": currency_code,
                "bank_branch_name": bank_branch_name,
                "iban": iban,
                "email": email,
                "rib_number": rib_number,
                "account_type": account_type,
                "ach_routing_number": ach_routing_number,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_line1"]) -> MetaOapg.properties.address_line1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_line2"]) -> MetaOapg.properties.address_line2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["province_state"]) -> MetaOapg.properties.province_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal"]) -> MetaOapg.properties.postal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_country_code"]) -> MetaOapg.properties.bank_country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swift_bic"]) -> MetaOapg.properties.swift_bic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_code"]) -> MetaOapg.properties.bank_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_name"]) -> MetaOapg.properties.original_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch_code"]) -> MetaOapg.properties.branch_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_branch_name"]) -> MetaOapg.properties.bank_branch_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rib_number"]) -> MetaOapg.properties.rib_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_routing_number"]) -> MetaOapg.properties.ach_routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["full_name", "phone", "address_line1", "address_line2", "city", "province_state", "postal", "bank_name", "country_code", "bank_country_code", "swift_bic", "account_number", "bank_code", "original_name", "tax_id", "branch_code", "currency_code", "bank_branch_name", "iban", "email", "rib_number", "account_type", "ach_routing_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_line1"]) -> typing.Union[MetaOapg.properties.address_line1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_line2"]) -> typing.Union[MetaOapg.properties.address_line2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["province_state"]) -> typing.Union[MetaOapg.properties.province_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal"]) -> typing.Union[MetaOapg.properties.postal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_name"]) -> typing.Union[MetaOapg.properties.bank_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_country_code"]) -> typing.Union[MetaOapg.properties.bank_country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swift_bic"]) -> typing.Union[MetaOapg.properties.swift_bic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> typing.Union[MetaOapg.properties.account_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_code"]) -> typing.Union[MetaOapg.properties.bank_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_name"]) -> typing.Union[MetaOapg.properties.original_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_id"]) -> typing.Union[MetaOapg.properties.tax_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch_code"]) -> typing.Union[MetaOapg.properties.branch_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union[MetaOapg.properties.currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_branch_name"]) -> typing.Union[MetaOapg.properties.bank_branch_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> typing.Union[MetaOapg.properties.iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rib_number"]) -> typing.Union[MetaOapg.properties.rib_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> typing.Union[MetaOapg.properties.account_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_routing_number"]) -> typing.Union[MetaOapg.properties.ach_routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["full_name", "phone", "address_line1", "address_line2", "city", "province_state", "postal", "bank_name", "country_code", "bank_country_code", "swift_bic", "account_number", "bank_code", "original_name", "tax_id", "branch_code", "currency_code", "bank_branch_name", "iban", "email", "rib_number", "account_type", "ach_routing_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        address_line1: typing.Union[MetaOapg.properties.address_line1, str, schemas.Unset] = schemas.unset,
        address_line2: typing.Union[MetaOapg.properties.address_line2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        province_state: typing.Union[MetaOapg.properties.province_state, str, schemas.Unset] = schemas.unset,
        postal: typing.Union[MetaOapg.properties.postal, str, schemas.Unset] = schemas.unset,
        bank_name: typing.Union[MetaOapg.properties.bank_name, str, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
        bank_country_code: typing.Union[MetaOapg.properties.bank_country_code, str, schemas.Unset] = schemas.unset,
        swift_bic: typing.Union[MetaOapg.properties.swift_bic, str, schemas.Unset] = schemas.unset,
        account_number: typing.Union[MetaOapg.properties.account_number, str, schemas.Unset] = schemas.unset,
        bank_code: typing.Union[MetaOapg.properties.bank_code, str, schemas.Unset] = schemas.unset,
        original_name: typing.Union[MetaOapg.properties.original_name, str, schemas.Unset] = schemas.unset,
        tax_id: typing.Union[MetaOapg.properties.tax_id, str, schemas.Unset] = schemas.unset,
        branch_code: typing.Union[MetaOapg.properties.branch_code, str, schemas.Unset] = schemas.unset,
        currency_code: typing.Union[MetaOapg.properties.currency_code, str, schemas.Unset] = schemas.unset,
        bank_branch_name: typing.Union[MetaOapg.properties.bank_branch_name, str, schemas.Unset] = schemas.unset,
        iban: typing.Union[MetaOapg.properties.iban, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        rib_number: typing.Union[MetaOapg.properties.rib_number, str, schemas.Unset] = schemas.unset,
        account_type: typing.Union[MetaOapg.properties.account_type, str, schemas.Unset] = schemas.unset,
        ach_routing_number: typing.Union[MetaOapg.properties.ach_routing_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkerBankAccountToAdd':
        return super().__new__(
            cls,
            *args,
            full_name=full_name,
            phone=phone,
            address_line1=address_line1,
            address_line2=address_line2,
            city=city,
            province_state=province_state,
            postal=postal,
            bank_name=bank_name,
            country_code=country_code,
            bank_country_code=bank_country_code,
            swift_bic=swift_bic,
            account_number=account_number,
            bank_code=bank_code,
            original_name=original_name,
            tax_id=tax_id,
            branch_code=branch_code,
            currency_code=currency_code,
            bank_branch_name=bank_branch_name,
            iban=iban,
            email=email,
            rib_number=rib_number,
            account_type=account_type,
            ach_routing_number=ach_routing_number,
            _configuration=_configuration,
            **kwargs,
        )
