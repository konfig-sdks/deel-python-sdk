# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class HealthInsuranceProvider(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Health insurance provider.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            is_unisure = schemas.BoolSchema
            home_page_url = schemas.StrSchema
            currency = schemas.StrSchema
            type = schemas.StrSchema
            ending_rule = schemas.StrSchema
            days_to_cancel = schemas.StrSchema
            pricing_info_link = schemas.StrSchema
            fixed_price = schemas.BoolSchema
        
            @staticmethod
            def attachments() -> typing.Type['HealthInsuranceProviderAttachments']:
                return HealthInsuranceProviderAttachments
            client_info_banner = schemas.StrSchema
            is_available_for_new_quotes = schemas.BoolSchema
        
            @staticmethod
            def plans() -> typing.Type['HealthInsuranceProviderPlans']:
                return HealthInsuranceProviderPlans
            __annotations__ = {
                "id": id,
                "name": name,
                "is_unisure": is_unisure,
                "home_page_url": home_page_url,
                "currency": currency,
                "type": type,
                "ending_rule": ending_rule,
                "days_to_cancel": days_to_cancel,
                "pricing_info_link": pricing_info_link,
                "fixed_price": fixed_price,
                "attachments": attachments,
                "client_info_banner": client_info_banner,
                "is_available_for_new_quotes": is_available_for_new_quotes,
                "plans": plans,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_unisure"]) -> MetaOapg.properties.is_unisure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_page_url"]) -> MetaOapg.properties.home_page_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ending_rule"]) -> MetaOapg.properties.ending_rule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_to_cancel"]) -> MetaOapg.properties.days_to_cancel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricing_info_link"]) -> MetaOapg.properties.pricing_info_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_price"]) -> MetaOapg.properties.fixed_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'HealthInsuranceProviderAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_info_banner"]) -> MetaOapg.properties.client_info_banner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_available_for_new_quotes"]) -> MetaOapg.properties.is_available_for_new_quotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plans"]) -> 'HealthInsuranceProviderPlans': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_unisure", "home_page_url", "currency", "type", "ending_rule", "days_to_cancel", "pricing_info_link", "fixed_price", "attachments", "client_info_banner", "is_available_for_new_quotes", "plans", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_unisure"]) -> typing.Union[MetaOapg.properties.is_unisure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_page_url"]) -> typing.Union[MetaOapg.properties.home_page_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ending_rule"]) -> typing.Union[MetaOapg.properties.ending_rule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_to_cancel"]) -> typing.Union[MetaOapg.properties.days_to_cancel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricing_info_link"]) -> typing.Union[MetaOapg.properties.pricing_info_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_price"]) -> typing.Union[MetaOapg.properties.fixed_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['HealthInsuranceProviderAttachments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_info_banner"]) -> typing.Union[MetaOapg.properties.client_info_banner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_available_for_new_quotes"]) -> typing.Union[MetaOapg.properties.is_available_for_new_quotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union['HealthInsuranceProviderPlans', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_unisure", "home_page_url", "currency", "type", "ending_rule", "days_to_cancel", "pricing_info_link", "fixed_price", "attachments", "client_info_banner", "is_available_for_new_quotes", "plans", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        is_unisure: typing.Union[MetaOapg.properties.is_unisure, bool, schemas.Unset] = schemas.unset,
        home_page_url: typing.Union[MetaOapg.properties.home_page_url, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        ending_rule: typing.Union[MetaOapg.properties.ending_rule, str, schemas.Unset] = schemas.unset,
        days_to_cancel: typing.Union[MetaOapg.properties.days_to_cancel, str, schemas.Unset] = schemas.unset,
        pricing_info_link: typing.Union[MetaOapg.properties.pricing_info_link, str, schemas.Unset] = schemas.unset,
        fixed_price: typing.Union[MetaOapg.properties.fixed_price, bool, schemas.Unset] = schemas.unset,
        attachments: typing.Union['HealthInsuranceProviderAttachments', schemas.Unset] = schemas.unset,
        client_info_banner: typing.Union[MetaOapg.properties.client_info_banner, str, schemas.Unset] = schemas.unset,
        is_available_for_new_quotes: typing.Union[MetaOapg.properties.is_available_for_new_quotes, bool, schemas.Unset] = schemas.unset,
        plans: typing.Union['HealthInsuranceProviderPlans', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HealthInsuranceProvider':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            is_unisure=is_unisure,
            home_page_url=home_page_url,
            currency=currency,
            type=type,
            ending_rule=ending_rule,
            days_to_cancel=days_to_cancel,
            pricing_info_link=pricing_info_link,
            fixed_price=fixed_price,
            attachments=attachments,
            client_info_banner=client_info_banner,
            is_available_for_new_quotes=is_available_for_new_quotes,
            plans=plans,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.health_insurance_provider_attachments import HealthInsuranceProviderAttachments
from deel_python_sdk.model.health_insurance_provider_plans import HealthInsuranceProviderPlans
