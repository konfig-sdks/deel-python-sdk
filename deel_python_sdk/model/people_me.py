# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class PeopleMe(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    People object representing a Deel
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            user_id = schemas.NumberSchema
            username = schemas.StrSchema
            first_name = schemas.StrSchema
            
            
            class middle_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middle_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_name = schemas.StrSchema
            full_name = schemas.StrSchema
            email = schemas.StrSchema
            
            
            class avatar_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'avatar_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def profile_type() -> typing.Type['ProfileTypeEnum']:
                return ProfileTypeEnum
            
            
            class slack_user_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slack_user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class slack_team_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slack_team_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            organization_id = schemas.NumberSchema
            
            
            class organization_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'organization_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def client_country() -> typing.Type['CountryCodeNulleable']:
                return CountryCodeNulleable
        
            @staticmethod
            def contractor_country() -> typing.Type['CountryCodeNulleable']:
                return CountryCodeNulleable
            
            
            class hris_enabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hris_enabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "middle_name": middle_name,
                "last_name": last_name,
                "full_name": full_name,
                "email": email,
                "avatar_url": avatar_url,
                "profile_type": profile_type,
                "slack_user_id": slack_user_id,
                "slack_team_id": slack_team_id,
                "organization_id": organization_id,
                "organization_name": organization_name,
                "client_country": client_country,
                "contractor_country": contractor_country,
                "hris_enabled": hris_enabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middle_name"]) -> MetaOapg.properties.middle_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_url"]) -> MetaOapg.properties.avatar_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_type"]) -> 'ProfileTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slack_user_id"]) -> MetaOapg.properties.slack_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slack_team_id"]) -> MetaOapg.properties.slack_team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_name"]) -> MetaOapg.properties.organization_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_country"]) -> 'CountryCodeNulleable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_country"]) -> 'CountryCodeNulleable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hris_enabled"]) -> MetaOapg.properties.hris_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "user_id", "username", "first_name", "middle_name", "last_name", "full_name", "email", "avatar_url", "profile_type", "slack_user_id", "slack_team_id", "organization_id", "organization_name", "client_country", "contractor_country", "hris_enabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middle_name"]) -> typing.Union[MetaOapg.properties.middle_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_url"]) -> typing.Union[MetaOapg.properties.avatar_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_type"]) -> typing.Union['ProfileTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slack_user_id"]) -> typing.Union[MetaOapg.properties.slack_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slack_team_id"]) -> typing.Union[MetaOapg.properties.slack_team_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> typing.Union[MetaOapg.properties.organization_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_name"]) -> typing.Union[MetaOapg.properties.organization_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_country"]) -> typing.Union['CountryCodeNulleable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_country"]) -> typing.Union['CountryCodeNulleable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hris_enabled"]) -> typing.Union[MetaOapg.properties.hris_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "user_id", "username", "first_name", "middle_name", "last_name", "full_name", "email", "avatar_url", "profile_type", "slack_user_id", "slack_team_id", "organization_id", "organization_name", "client_country", "contractor_country", "hris_enabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        middle_name: typing.Union[MetaOapg.properties.middle_name, None, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        avatar_url: typing.Union[MetaOapg.properties.avatar_url, None, str, schemas.Unset] = schemas.unset,
        profile_type: typing.Union['ProfileTypeEnum', schemas.Unset] = schemas.unset,
        slack_user_id: typing.Union[MetaOapg.properties.slack_user_id, None, str, schemas.Unset] = schemas.unset,
        slack_team_id: typing.Union[MetaOapg.properties.slack_team_id, None, str, schemas.Unset] = schemas.unset,
        organization_id: typing.Union[MetaOapg.properties.organization_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        organization_name: typing.Union[MetaOapg.properties.organization_name, None, str, schemas.Unset] = schemas.unset,
        client_country: typing.Union['CountryCodeNulleable', schemas.Unset] = schemas.unset,
        contractor_country: typing.Union['CountryCodeNulleable', schemas.Unset] = schemas.unset,
        hris_enabled: typing.Union[MetaOapg.properties.hris_enabled, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PeopleMe':
        return super().__new__(
            cls,
            *args,
            id=id,
            user_id=user_id,
            username=username,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            full_name=full_name,
            email=email,
            avatar_url=avatar_url,
            profile_type=profile_type,
            slack_user_id=slack_user_id,
            slack_team_id=slack_team_id,
            organization_id=organization_id,
            organization_name=organization_name,
            client_country=client_country,
            contractor_country=contractor_country,
            hris_enabled=hris_enabled,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.country_code_nulleable import CountryCodeNulleable
from deel_python_sdk.model.profile_type_enum import ProfileTypeEnum
