# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmployeeTimeoffsPoliciesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "tracking_end_date",
            "tracking_start_date",
            "name",
            "description",
            "entitlement",
            "id",
            "unit_amount",
            "used",
            "type",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            type = schemas.StrSchema
            name = schemas.StrSchema
            unit_amount = schemas.NumberSchema
            
            
            class used(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'used':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tracking_start_date(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tracking_start_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tracking_end_date(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tracking_end_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def entitlement() -> typing.Type['EmployeeTimeoffsPoliciesItemEntitlement']:
                return EmployeeTimeoffsPoliciesItemEntitlement
            __annotations__ = {
                "description": description,
                "id": id,
                "type": type,
                "name": name,
                "unit_amount": unit_amount,
                "used": used,
                "tracking_start_date": tracking_start_date,
                "tracking_end_date": tracking_end_date,
                "entitlement": entitlement,
            }
    
    tracking_end_date: MetaOapg.properties.tracking_end_date
    tracking_start_date: MetaOapg.properties.tracking_start_date
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    entitlement: 'EmployeeTimeoffsPoliciesItemEntitlement'
    id: MetaOapg.properties.id
    unit_amount: MetaOapg.properties.unit_amount
    used: MetaOapg.properties.used
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_amount"]) -> MetaOapg.properties.unit_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["used"]) -> MetaOapg.properties.used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_start_date"]) -> MetaOapg.properties.tracking_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_end_date"]) -> MetaOapg.properties.tracking_end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entitlement"]) -> 'EmployeeTimeoffsPoliciesItemEntitlement': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "type", "name", "unit_amount", "used", "tracking_start_date", "tracking_end_date", "entitlement", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_amount"]) -> MetaOapg.properties.unit_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["used"]) -> MetaOapg.properties.used: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_start_date"]) -> MetaOapg.properties.tracking_start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_end_date"]) -> MetaOapg.properties.tracking_end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entitlement"]) -> 'EmployeeTimeoffsPoliciesItemEntitlement': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "type", "name", "unit_amount", "used", "tracking_start_date", "tracking_end_date", "entitlement", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tracking_end_date: typing.Union[MetaOapg.properties.tracking_end_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tracking_start_date: typing.Union[MetaOapg.properties.tracking_start_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        entitlement: 'EmployeeTimeoffsPoliciesItemEntitlement',
        id: typing.Union[MetaOapg.properties.id, str, ],
        unit_amount: typing.Union[MetaOapg.properties.unit_amount, decimal.Decimal, int, float, ],
        used: typing.Union[MetaOapg.properties.used, None, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeTimeoffsPoliciesItem':
        return super().__new__(
            cls,
            *args,
            tracking_end_date=tracking_end_date,
            tracking_start_date=tracking_start_date,
            name=name,
            description=description,
            entitlement=entitlement,
            id=id,
            unit_amount=unit_amount,
            used=used,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.employee_timeoffs_policies_item_entitlement import EmployeeTimeoffsPoliciesItemEntitlement
