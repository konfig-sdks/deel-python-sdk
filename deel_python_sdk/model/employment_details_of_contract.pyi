# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmploymentDetailsOfContract(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "days_per_week",
            "hours_per_day",
            "paid_vacation_days",
            "probation_period",
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            days_per_week = schemas.NumberSchema
            hours_per_day = schemas.NumberSchema
            
            
            class probation_period(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'probation_period':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            paid_vacation_days = schemas.NumberSchema
        
            @staticmethod
            def country() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "days_per_week": days_per_week,
                "hours_per_day": hours_per_day,
                "probation_period": probation_period,
                "paid_vacation_days": paid_vacation_days,
                "country": country,
                "state": state,
            }
    
    days_per_week: MetaOapg.properties.days_per_week
    hours_per_day: MetaOapg.properties.hours_per_day
    paid_vacation_days: MetaOapg.properties.paid_vacation_days
    probation_period: MetaOapg.properties.probation_period
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_per_week"]) -> MetaOapg.properties.days_per_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours_per_day"]) -> MetaOapg.properties.hours_per_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probation_period"]) -> MetaOapg.properties.probation_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_vacation_days"]) -> MetaOapg.properties.paid_vacation_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "days_per_week", "hours_per_day", "probation_period", "paid_vacation_days", "country", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_per_week"]) -> MetaOapg.properties.days_per_week: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours_per_day"]) -> MetaOapg.properties.hours_per_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probation_period"]) -> MetaOapg.properties.probation_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_vacation_days"]) -> MetaOapg.properties.paid_vacation_days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "days_per_week", "hours_per_day", "probation_period", "paid_vacation_days", "country", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        days_per_week: typing.Union[MetaOapg.properties.days_per_week, decimal.Decimal, int, float, ],
        hours_per_day: typing.Union[MetaOapg.properties.hours_per_day, decimal.Decimal, int, float, ],
        paid_vacation_days: typing.Union[MetaOapg.properties.paid_vacation_days, decimal.Decimal, int, float, ],
        probation_period: typing.Union[MetaOapg.properties.probation_period, None, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        country: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmploymentDetailsOfContract':
        return super().__new__(
            cls,
            *args,
            days_per_week=days_per_week,
            hours_per_day=hours_per_day,
            paid_vacation_days=paid_vacation_days,
            probation_period=probation_period,
            type=type,
            country=country,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.country_code import CountryCode
