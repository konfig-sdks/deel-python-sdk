# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class Payment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "paid_at",
            "total",
            "created_at",
            "id",
            "label",
            "workers",
            "payment_method",
            "payment_currency",
            "status",
        }
        
        class properties:
            id = schemas.NumberSchema
        
            @staticmethod
            def payment_method() -> typing.Type['PaymentMethod']:
                return PaymentMethod
        
            @staticmethod
            def status() -> typing.Type['PaymentStatusEnum']:
                return PaymentStatusEnum
        
            @staticmethod
            def payment_currency() -> typing.Type['CurrencyCode']:
                return CurrencyCode
            label = schemas.StrSchema
        
            @staticmethod
            def paid_at() -> typing.Type['DateTimeString']:
                return DateTimeString
        
            @staticmethod
            def created_at() -> typing.Type['DateTimeString']:
                return DateTimeString
            total = schemas.StrSchema
        
            @staticmethod
            def workers() -> typing.Type['PaymentWorkerList']:
                return PaymentWorkerList
            __annotations__ = {
                "id": id,
                "payment_method": payment_method,
                "status": status,
                "payment_currency": payment_currency,
                "label": label,
                "paid_at": paid_at,
                "created_at": created_at,
                "total": total,
                "workers": workers,
            }
    
    paid_at: 'DateTimeString'
    total: MetaOapg.properties.total
    created_at: 'DateTimeString'
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    workers: 'PaymentWorkerList'
    payment_method: 'PaymentMethod'
    payment_currency: 'CurrencyCode'
    status: 'PaymentStatusEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> 'PaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PaymentStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_currency"]) -> 'CurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workers"]) -> 'PaymentWorkerList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "payment_method", "status", "payment_currency", "label", "paid_at", "created_at", "total", "workers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> 'PaymentMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'PaymentStatusEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_currency"]) -> 'CurrencyCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workers"]) -> 'PaymentWorkerList': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "payment_method", "status", "payment_currency", "label", "paid_at", "created_at", "total", "workers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paid_at: 'DateTimeString',
        total: typing.Union[MetaOapg.properties.total, str, ],
        created_at: 'DateTimeString',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        workers: 'PaymentWorkerList',
        payment_method: 'PaymentMethod',
        payment_currency: 'CurrencyCode',
        status: 'PaymentStatusEnum',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Payment':
        return super().__new__(
            cls,
            *args,
            paid_at=paid_at,
            total=total,
            created_at=created_at,
            id=id,
            label=label,
            workers=workers,
            payment_method=payment_method,
            payment_currency=payment_currency,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.currency_code import CurrencyCode
from deel_python_sdk.model.date_time_string import DateTimeString
from deel_python_sdk.model.payment_method import PaymentMethod
from deel_python_sdk.model.payment_status_enum import PaymentStatusEnum
from deel_python_sdk.model.payment_worker_list import PaymentWorkerList
