# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class InvoiceAdjustmentPendingForApproval(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "contract_oid",
            "event_type",
            "adjustment_type",
            "adjustment_id",
            "contract_name",
        }
        
        class properties:
            contract_name = schemas.StrSchema
            contract_oid = schemas.StrSchema
            adjustment_id = schemas.StrSchema
            adjustment_type = schemas.StrSchema
            event_type = schemas.StrSchema
            team_id = schemas.StrSchema
        
            @staticmethod
            def approvers() -> typing.Type['InvoiceAdjustmentPendingForApprovalApprovers']:
                return InvoiceAdjustmentPendingForApprovalApprovers
            __annotations__ = {
                "contract_name": contract_name,
                "contract_oid": contract_oid,
                "adjustment_id": adjustment_id,
                "adjustment_type": adjustment_type,
                "event_type": event_type,
                "team_id": team_id,
                "approvers": approvers,
            }
    
    contract_oid: MetaOapg.properties.contract_oid
    event_type: MetaOapg.properties.event_type
    adjustment_type: MetaOapg.properties.adjustment_type
    adjustment_id: MetaOapg.properties.adjustment_id
    contract_name: MetaOapg.properties.contract_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_name"]) -> MetaOapg.properties.contract_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment_id"]) -> MetaOapg.properties.adjustment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment_type"]) -> MetaOapg.properties.adjustment_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvers"]) -> 'InvoiceAdjustmentPendingForApprovalApprovers': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_name", "contract_oid", "adjustment_id", "adjustment_type", "event_type", "team_id", "approvers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_name"]) -> MetaOapg.properties.contract_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment_id"]) -> MetaOapg.properties.adjustment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment_type"]) -> MetaOapg.properties.adjustment_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> typing.Union[MetaOapg.properties.team_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvers"]) -> typing.Union['InvoiceAdjustmentPendingForApprovalApprovers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_name", "contract_oid", "adjustment_id", "adjustment_type", "event_type", "team_id", "approvers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_oid: typing.Union[MetaOapg.properties.contract_oid, str, ],
        event_type: typing.Union[MetaOapg.properties.event_type, str, ],
        adjustment_type: typing.Union[MetaOapg.properties.adjustment_type, str, ],
        adjustment_id: typing.Union[MetaOapg.properties.adjustment_id, str, ],
        contract_name: typing.Union[MetaOapg.properties.contract_name, str, ],
        team_id: typing.Union[MetaOapg.properties.team_id, str, schemas.Unset] = schemas.unset,
        approvers: typing.Union['InvoiceAdjustmentPendingForApprovalApprovers', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceAdjustmentPendingForApproval':
        return super().__new__(
            cls,
            *args,
            contract_oid=contract_oid,
            event_type=event_type,
            adjustment_type=adjustment_type,
            adjustment_id=adjustment_id,
            contract_name=contract_name,
            team_id=team_id,
            approvers=approvers,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.invoice_adjustment_pending_for_approval_approvers import InvoiceAdjustmentPendingForApprovalApprovers
