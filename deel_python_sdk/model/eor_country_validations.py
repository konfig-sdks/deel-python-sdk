# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorCountryValidations(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def holiday() -> typing.Type['EorCountryValidationsHoliday']:
                return EorCountryValidationsHoliday
        
            @staticmethod
            def part_time_holiday() -> typing.Type['EorCountryValidationsPartTimeHoliday']:
                return EorCountryValidationsPartTimeHoliday
        
            @staticmethod
            def sick_days() -> typing.Type['EorCountryValidationsSickDays']:
                return EorCountryValidationsSickDays
        
            @staticmethod
            def salary() -> typing.Type['EorCountryValidationsSalary']:
                return EorCountryValidationsSalary
        
            @staticmethod
            def probation() -> typing.Type['EorCountryValidationsProbation']:
                return EorCountryValidationsProbation
        
            @staticmethod
            def part_time_probation() -> typing.Type['EorCountryValidationsPartTimeProbation']:
                return EorCountryValidationsPartTimeProbation
        
            @staticmethod
            def work_schedule() -> typing.Type['EorCountryValidationsWorkSchedule']:
                return EorCountryValidationsWorkSchedule
            insurance_fee = schemas.StrSchema
            currency = schemas.StrSchema
            hiring_guide_country_name = schemas.StrSchema
            start_date_buffer = schemas.NumberSchema
        
            @staticmethod
            def definite_contract() -> typing.Type['EorCountryValidationsDefiniteContract']:
                return EorCountryValidationsDefiniteContract
            adjustments_information_box = schemas.StrSchema
        
            @staticmethod
            def health_insurance() -> typing.Type['EorCountryValidationsHealthInsurance']:
                return EorCountryValidationsHealthInsurance
        
            @staticmethod
            def pension() -> typing.Type['EorCountryValidationsPension']:
                return EorCountryValidationsPension
            
            
            class mandatory_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EorField']:
                        return EorField
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EorField'], typing.List['EorField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatory_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EorField':
                    return super().__getitem__(i)
            __annotations__ = {
                "holiday": holiday,
                "part_time_holiday": part_time_holiday,
                "sick_days": sick_days,
                "salary": salary,
                "probation": probation,
                "part_time_probation": part_time_probation,
                "work_schedule": work_schedule,
                "insurance_fee": insurance_fee,
                "currency": currency,
                "hiring_guide_country_name": hiring_guide_country_name,
                "start_date_buffer": start_date_buffer,
                "definite_contract": definite_contract,
                "adjustments_information_box": adjustments_information_box,
                "health_insurance": health_insurance,
                "pension": pension,
                "mandatory_fields": mandatory_fields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holiday"]) -> 'EorCountryValidationsHoliday': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["part_time_holiday"]) -> 'EorCountryValidationsPartTimeHoliday': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_days"]) -> 'EorCountryValidationsSickDays': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary"]) -> 'EorCountryValidationsSalary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probation"]) -> 'EorCountryValidationsProbation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["part_time_probation"]) -> 'EorCountryValidationsPartTimeProbation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_schedule"]) -> 'EorCountryValidationsWorkSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance_fee"]) -> MetaOapg.properties.insurance_fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_guide_country_name"]) -> MetaOapg.properties.hiring_guide_country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date_buffer"]) -> MetaOapg.properties.start_date_buffer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definite_contract"]) -> 'EorCountryValidationsDefiniteContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustments_information_box"]) -> MetaOapg.properties.adjustments_information_box: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["health_insurance"]) -> 'EorCountryValidationsHealthInsurance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pension"]) -> 'EorCountryValidationsPension': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatory_fields"]) -> MetaOapg.properties.mandatory_fields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["holiday", "part_time_holiday", "sick_days", "salary", "probation", "part_time_probation", "work_schedule", "insurance_fee", "currency", "hiring_guide_country_name", "start_date_buffer", "definite_contract", "adjustments_information_box", "health_insurance", "pension", "mandatory_fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holiday"]) -> typing.Union['EorCountryValidationsHoliday', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["part_time_holiday"]) -> typing.Union['EorCountryValidationsPartTimeHoliday', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_days"]) -> typing.Union['EorCountryValidationsSickDays', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary"]) -> typing.Union['EorCountryValidationsSalary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probation"]) -> typing.Union['EorCountryValidationsProbation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["part_time_probation"]) -> typing.Union['EorCountryValidationsPartTimeProbation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_schedule"]) -> typing.Union['EorCountryValidationsWorkSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance_fee"]) -> typing.Union[MetaOapg.properties.insurance_fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_guide_country_name"]) -> typing.Union[MetaOapg.properties.hiring_guide_country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date_buffer"]) -> typing.Union[MetaOapg.properties.start_date_buffer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definite_contract"]) -> typing.Union['EorCountryValidationsDefiniteContract', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustments_information_box"]) -> typing.Union[MetaOapg.properties.adjustments_information_box, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["health_insurance"]) -> typing.Union['EorCountryValidationsHealthInsurance', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pension"]) -> typing.Union['EorCountryValidationsPension', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatory_fields"]) -> typing.Union[MetaOapg.properties.mandatory_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["holiday", "part_time_holiday", "sick_days", "salary", "probation", "part_time_probation", "work_schedule", "insurance_fee", "currency", "hiring_guide_country_name", "start_date_buffer", "definite_contract", "adjustments_information_box", "health_insurance", "pension", "mandatory_fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        holiday: typing.Union['EorCountryValidationsHoliday', schemas.Unset] = schemas.unset,
        part_time_holiday: typing.Union['EorCountryValidationsPartTimeHoliday', schemas.Unset] = schemas.unset,
        sick_days: typing.Union['EorCountryValidationsSickDays', schemas.Unset] = schemas.unset,
        salary: typing.Union['EorCountryValidationsSalary', schemas.Unset] = schemas.unset,
        probation: typing.Union['EorCountryValidationsProbation', schemas.Unset] = schemas.unset,
        part_time_probation: typing.Union['EorCountryValidationsPartTimeProbation', schemas.Unset] = schemas.unset,
        work_schedule: typing.Union['EorCountryValidationsWorkSchedule', schemas.Unset] = schemas.unset,
        insurance_fee: typing.Union[MetaOapg.properties.insurance_fee, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        hiring_guide_country_name: typing.Union[MetaOapg.properties.hiring_guide_country_name, str, schemas.Unset] = schemas.unset,
        start_date_buffer: typing.Union[MetaOapg.properties.start_date_buffer, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        definite_contract: typing.Union['EorCountryValidationsDefiniteContract', schemas.Unset] = schemas.unset,
        adjustments_information_box: typing.Union[MetaOapg.properties.adjustments_information_box, str, schemas.Unset] = schemas.unset,
        health_insurance: typing.Union['EorCountryValidationsHealthInsurance', schemas.Unset] = schemas.unset,
        pension: typing.Union['EorCountryValidationsPension', schemas.Unset] = schemas.unset,
        mandatory_fields: typing.Union[MetaOapg.properties.mandatory_fields, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorCountryValidations':
        return super().__new__(
            cls,
            *args,
            holiday=holiday,
            part_time_holiday=part_time_holiday,
            sick_days=sick_days,
            salary=salary,
            probation=probation,
            part_time_probation=part_time_probation,
            work_schedule=work_schedule,
            insurance_fee=insurance_fee,
            currency=currency,
            hiring_guide_country_name=hiring_guide_country_name,
            start_date_buffer=start_date_buffer,
            definite_contract=definite_contract,
            adjustments_information_box=adjustments_information_box,
            health_insurance=health_insurance,
            pension=pension,
            mandatory_fields=mandatory_fields,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_country_validations_definite_contract import EorCountryValidationsDefiniteContract
from deel_python_sdk.model.eor_country_validations_health_insurance import EorCountryValidationsHealthInsurance
from deel_python_sdk.model.eor_country_validations_holiday import EorCountryValidationsHoliday
from deel_python_sdk.model.eor_country_validations_part_time_holiday import EorCountryValidationsPartTimeHoliday
from deel_python_sdk.model.eor_country_validations_part_time_probation import EorCountryValidationsPartTimeProbation
from deel_python_sdk.model.eor_country_validations_pension import EorCountryValidationsPension
from deel_python_sdk.model.eor_country_validations_probation import EorCountryValidationsProbation
from deel_python_sdk.model.eor_country_validations_salary import EorCountryValidationsSalary
from deel_python_sdk.model.eor_country_validations_sick_days import EorCountryValidationsSickDays
from deel_python_sdk.model.eor_country_validations_work_schedule import EorCountryValidationsWorkSchedule
from deel_python_sdk.model.eor_field import EorField
