# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmployeeTimeoffsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "end_date",
            "requester",
            "reason",
            "attachments",
            "is_end_date_half_day",
            "reviewed_at",
            "created_at",
            "days_used",
            "reviewer",
            "type",
            "with_multiple_dates",
            "days_used_start_year",
            "updated_at",
            "denial_reason",
            "is_start_date_half_day",
            "time_off_id",
            "change_request",
            "days_used_end_year",
            "other_time_off_name",
            "requested_at",
            "start_date",
            "status",
        }
        
        class properties:
            time_off_id = schemas.StrSchema
            reason = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VACATION": "VACATION",
                        "SICK_LEAVE": "SICK_LEAVE",
                        "OTHER": "OTHER",
                    }
                
                @schemas.classproperty
                def VACATION(cls):
                    return cls("VACATION")
                
                @schemas.classproperty
                def SICK_LEAVE(cls):
                    return cls("SICK_LEAVE")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("OTHER")
            requested_at = schemas.StrSchema
            reviewed_at = schemas.StrSchema
            with_multiple_dates = schemas.BoolSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            
            
            class denial_reason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'denial_reason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def requester() -> typing.Type['EmployeeTimeoffsItemRequester']:
                return EmployeeTimeoffsItemRequester
        
            @staticmethod
            def reviewer() -> typing.Type['EmployeeTimeoffsItemReviewer']:
                return EmployeeTimeoffsItemReviewer
            days_used_start_year = schemas.StrSchema
            days_used_end_year = schemas.StrSchema
            days_used = schemas.StrSchema
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            is_start_date_half_day = schemas.BoolSchema
            is_end_date_half_day = schemas.BoolSchema
        
            @staticmethod
            def attachments() -> typing.Type['EmployeeTimeoffsItemAttachments']:
                return EmployeeTimeoffsItemAttachments
            
            
            class change_request(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'change_request':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "time_off_id": time_off_id,
                "reason": reason,
                "type": type,
                "requested_at": requested_at,
                "reviewed_at": reviewed_at,
                "with_multiple_dates": with_multiple_dates,
                "created_at": created_at,
                "updated_at": updated_at,
                "denial_reason": denial_reason,
                "requester": requester,
                "reviewer": reviewer,
                "days_used_start_year": days_used_start_year,
                "days_used_end_year": days_used_end_year,
                "days_used": days_used,
                "start_date": start_date,
                "end_date": end_date,
                "is_start_date_half_day": is_start_date_half_day,
                "is_end_date_half_day": is_end_date_half_day,
                "attachments": attachments,
                "change_request": change_request,
            }
    
    end_date: MetaOapg.properties.end_date
    requester: 'EmployeeTimeoffsItemRequester'
    reason: MetaOapg.properties.reason
    attachments: 'EmployeeTimeoffsItemAttachments'
    is_end_date_half_day: MetaOapg.properties.is_end_date_half_day
    reviewed_at: MetaOapg.properties.reviewed_at
    created_at: MetaOapg.properties.created_at
    days_used: MetaOapg.properties.days_used
    reviewer: 'EmployeeTimeoffsItemReviewer'
    type: MetaOapg.properties.type
    with_multiple_dates: MetaOapg.properties.with_multiple_dates
    days_used_start_year: MetaOapg.properties.days_used_start_year
    updated_at: MetaOapg.properties.updated_at
    denial_reason: MetaOapg.properties.denial_reason
    is_start_date_half_day: MetaOapg.properties.is_start_date_half_day
    time_off_id: MetaOapg.properties.time_off_id
    change_request: MetaOapg.properties.change_request
    days_used_end_year: MetaOapg.properties.days_used_end_year
    other_time_off_name: schemas.AnyTypeSchema
    requested_at: MetaOapg.properties.requested_at
    start_date: MetaOapg.properties.start_date
    status: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_id"]) -> MetaOapg.properties.time_off_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_at"]) -> MetaOapg.properties.requested_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_at"]) -> MetaOapg.properties.reviewed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["with_multiple_dates"]) -> MetaOapg.properties.with_multiple_dates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denial_reason"]) -> MetaOapg.properties.denial_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> 'EmployeeTimeoffsItemRequester': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewer"]) -> 'EmployeeTimeoffsItemReviewer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_start_year"]) -> MetaOapg.properties.days_used_start_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_end_year"]) -> MetaOapg.properties.days_used_end_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used"]) -> MetaOapg.properties.days_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_start_date_half_day"]) -> MetaOapg.properties.is_start_date_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_end_date_half_day"]) -> MetaOapg.properties.is_end_date_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'EmployeeTimeoffsItemAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["change_request"]) -> MetaOapg.properties.change_request: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["time_off_id", "reason", "type", "requested_at", "reviewed_at", "with_multiple_dates", "created_at", "updated_at", "denial_reason", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "days_used", "start_date", "end_date", "is_start_date_half_day", "is_end_date_half_day", "attachments", "change_request", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_id"]) -> MetaOapg.properties.time_off_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_at"]) -> MetaOapg.properties.requested_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_at"]) -> MetaOapg.properties.reviewed_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["with_multiple_dates"]) -> MetaOapg.properties.with_multiple_dates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denial_reason"]) -> MetaOapg.properties.denial_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> 'EmployeeTimeoffsItemRequester': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewer"]) -> 'EmployeeTimeoffsItemReviewer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_start_year"]) -> MetaOapg.properties.days_used_start_year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_end_year"]) -> MetaOapg.properties.days_used_end_year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used"]) -> MetaOapg.properties.days_used: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_start_date_half_day"]) -> MetaOapg.properties.is_start_date_half_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_end_date_half_day"]) -> MetaOapg.properties.is_end_date_half_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> 'EmployeeTimeoffsItemAttachments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["change_request"]) -> MetaOapg.properties.change_request: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time_off_id", "reason", "type", "requested_at", "reviewed_at", "with_multiple_dates", "created_at", "updated_at", "denial_reason", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "days_used", "start_date", "end_date", "is_start_date_half_day", "is_end_date_half_day", "attachments", "change_request", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, ],
        requester: 'EmployeeTimeoffsItemRequester',
        reason: typing.Union[MetaOapg.properties.reason, str, ],
        attachments: 'EmployeeTimeoffsItemAttachments',
        is_end_date_half_day: typing.Union[MetaOapg.properties.is_end_date_half_day, bool, ],
        reviewed_at: typing.Union[MetaOapg.properties.reviewed_at, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        days_used: typing.Union[MetaOapg.properties.days_used, str, ],
        reviewer: 'EmployeeTimeoffsItemReviewer',
        type: typing.Union[MetaOapg.properties.type, str, ],
        with_multiple_dates: typing.Union[MetaOapg.properties.with_multiple_dates, bool, ],
        days_used_start_year: typing.Union[MetaOapg.properties.days_used_start_year, str, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        denial_reason: typing.Union[MetaOapg.properties.denial_reason, None, str, ],
        is_start_date_half_day: typing.Union[MetaOapg.properties.is_start_date_half_day, bool, ],
        time_off_id: typing.Union[MetaOapg.properties.time_off_id, str, ],
        change_request: typing.Union[MetaOapg.properties.change_request, None, str, ],
        days_used_end_year: typing.Union[MetaOapg.properties.days_used_end_year, str, ],
        other_time_off_name: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        requested_at: typing.Union[MetaOapg.properties.requested_at, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        status: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeTimeoffsItem':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            requester=requester,
            reason=reason,
            attachments=attachments,
            is_end_date_half_day=is_end_date_half_day,
            reviewed_at=reviewed_at,
            created_at=created_at,
            days_used=days_used,
            reviewer=reviewer,
            type=type,
            with_multiple_dates=with_multiple_dates,
            days_used_start_year=days_used_start_year,
            updated_at=updated_at,
            denial_reason=denial_reason,
            is_start_date_half_day=is_start_date_half_day,
            time_off_id=time_off_id,
            change_request=change_request,
            days_used_end_year=days_used_end_year,
            other_time_off_name=other_time_off_name,
            requested_at=requested_at,
            start_date=start_date,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.employee_timeoffs_item_attachments import EmployeeTimeoffsItemAttachments
from deel_python_sdk.model.employee_timeoffs_item_requester import EmployeeTimeoffsItemRequester
from deel_python_sdk.model.employee_timeoffs_item_reviewer import EmployeeTimeoffsItemReviewer
