# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class ContractToCreateShared(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of contract to create
    """


    class MetaOapg:
        required = {
            "meta",
            "client",
            "title",
            "type",
            "job_title",
        }
        
        class properties:
            title = schemas.StrSchema
        
            @staticmethod
            def client() -> typing.Type['ContractToCreateSharedClient']:
                return ContractToCreateSharedClient
        
            @staticmethod
            def job_title() -> typing.Type['ContractToCreateSharedJobTitle']:
                return ContractToCreateSharedJobTitle
        
            @staticmethod
            def meta() -> typing.Type['MetaDataOfContractToCreate']:
                return MetaDataOfContractToCreate
        
            @staticmethod
            def country_code() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class state_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class scope_of_work(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scope_of_work':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class special_clause(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'special_clause':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def termination_date() -> typing.Type['DateString']:
                return DateString
        
            @staticmethod
            def seniority() -> typing.Type['ContractToCreateSharedSeniority']:
                return ContractToCreateSharedSeniority
        
            @staticmethod
            def notice_period() -> typing.Type['NoticePeriod']:
                return NoticePeriod
        
            @staticmethod
            def who_reports() -> typing.Type['ContractWhoReportsEnum']:
                return ContractWhoReportsEnum
            
            
            class external_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def worker() -> typing.Type['ContractToCreateSharedWorker']:
                return ContractToCreateSharedWorker
            __annotations__ = {
                "title": title,
                "client": client,
                "job_title": job_title,
                "meta": meta,
                "country_code": country_code,
                "state_code": state_code,
                "scope_of_work": scope_of_work,
                "special_clause": special_clause,
                "termination_date": termination_date,
                "seniority": seniority,
                "notice_period": notice_period,
                "who_reports": who_reports,
                "external_id": external_id,
                "worker": worker,
            }
    
    meta: 'MetaDataOfContractToCreate'
    client: 'ContractToCreateSharedClient'
    title: MetaOapg.properties.title
    type: schemas.AnyTypeSchema
    job_title: 'ContractToCreateSharedJobTitle'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'ContractToCreateSharedClient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> 'ContractToCreateSharedJobTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'MetaDataOfContractToCreate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_code"]) -> MetaOapg.properties.state_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope_of_work"]) -> MetaOapg.properties.scope_of_work: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["special_clause"]) -> MetaOapg.properties.special_clause: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_date"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seniority"]) -> 'ContractToCreateSharedSeniority': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notice_period"]) -> 'NoticePeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["who_reports"]) -> 'ContractWhoReportsEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker"]) -> 'ContractToCreateSharedWorker': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "client", "job_title", "meta", "country_code", "state_code", "scope_of_work", "special_clause", "termination_date", "seniority", "notice_period", "who_reports", "external_id", "worker", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> 'ContractToCreateSharedClient': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> 'ContractToCreateSharedJobTitle': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'MetaDataOfContractToCreate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_code"]) -> typing.Union[MetaOapg.properties.state_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope_of_work"]) -> typing.Union[MetaOapg.properties.scope_of_work, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["special_clause"]) -> typing.Union[MetaOapg.properties.special_clause, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_date"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seniority"]) -> typing.Union['ContractToCreateSharedSeniority', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notice_period"]) -> typing.Union['NoticePeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["who_reports"]) -> typing.Union['ContractWhoReportsEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker"]) -> typing.Union['ContractToCreateSharedWorker', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "client", "job_title", "meta", "country_code", "state_code", "scope_of_work", "special_clause", "termination_date", "seniority", "notice_period", "who_reports", "external_id", "worker", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meta: 'MetaDataOfContractToCreate',
        client: 'ContractToCreateSharedClient',
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        job_title: 'ContractToCreateSharedJobTitle',
        country_code: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        state_code: typing.Union[MetaOapg.properties.state_code, None, str, schemas.Unset] = schemas.unset,
        scope_of_work: typing.Union[MetaOapg.properties.scope_of_work, None, str, schemas.Unset] = schemas.unset,
        special_clause: typing.Union[MetaOapg.properties.special_clause, None, str, schemas.Unset] = schemas.unset,
        termination_date: typing.Union['DateString', schemas.Unset] = schemas.unset,
        seniority: typing.Union['ContractToCreateSharedSeniority', schemas.Unset] = schemas.unset,
        notice_period: typing.Union['NoticePeriod', schemas.Unset] = schemas.unset,
        who_reports: typing.Union['ContractWhoReportsEnum', schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, None, str, schemas.Unset] = schemas.unset,
        worker: typing.Union['ContractToCreateSharedWorker', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractToCreateShared':
        return super().__new__(
            cls,
            *args,
            meta=meta,
            client=client,
            title=title,
            type=type,
            job_title=job_title,
            country_code=country_code,
            state_code=state_code,
            scope_of_work=scope_of_work,
            special_clause=special_clause,
            termination_date=termination_date,
            seniority=seniority,
            notice_period=notice_period,
            who_reports=who_reports,
            external_id=external_id,
            worker=worker,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.contract_to_create_shared_client import ContractToCreateSharedClient
from deel_python_sdk.model.contract_to_create_shared_job_title import ContractToCreateSharedJobTitle
from deel_python_sdk.model.contract_to_create_shared_seniority import ContractToCreateSharedSeniority
from deel_python_sdk.model.contract_to_create_shared_worker import ContractToCreateSharedWorker
from deel_python_sdk.model.contract_who_reports_enum import ContractWhoReportsEnum
from deel_python_sdk.model.country_code import CountryCode
from deel_python_sdk.model.date_string import DateString
from deel_python_sdk.model.meta_data_of_contract_to_create import MetaDataOfContractToCreate
from deel_python_sdk.model.notice_period import NoticePeriod
