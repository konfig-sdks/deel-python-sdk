# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class InviteTeamMemberToSign(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "contract_oid",
            "contract_name",
            "invitee_name",
            "invitee_id",
        }
        
        class properties:
            contract_oid = schemas.StrSchema
            contract_name = schemas.StrSchema
            invitee_id = schemas.NumberSchema
            invitee_name = schemas.StrSchema
            __annotations__ = {
                "contract_oid": contract_oid,
                "contract_name": contract_name,
                "invitee_id": invitee_id,
                "invitee_name": invitee_name,
            }
    
    contract_oid: MetaOapg.properties.contract_oid
    contract_name: MetaOapg.properties.contract_name
    invitee_name: MetaOapg.properties.invitee_name
    invitee_id: MetaOapg.properties.invitee_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_name"]) -> MetaOapg.properties.contract_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invitee_id"]) -> MetaOapg.properties.invitee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invitee_name"]) -> MetaOapg.properties.invitee_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_oid", "contract_name", "invitee_id", "invitee_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_name"]) -> MetaOapg.properties.contract_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invitee_id"]) -> MetaOapg.properties.invitee_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invitee_name"]) -> MetaOapg.properties.invitee_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_oid", "contract_name", "invitee_id", "invitee_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_oid: typing.Union[MetaOapg.properties.contract_oid, str, ],
        contract_name: typing.Union[MetaOapg.properties.contract_name, str, ],
        invitee_name: typing.Union[MetaOapg.properties.invitee_name, str, ],
        invitee_id: typing.Union[MetaOapg.properties.invitee_id, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InviteTeamMemberToSign':
        return super().__new__(
            cls,
            *args,
            contract_oid=contract_oid,
            contract_name=contract_name,
            invitee_name=invitee_name,
            invitee_id=invitee_id,
            _configuration=_configuration,
            **kwargs,
        )
