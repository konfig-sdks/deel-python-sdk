# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorEntitlementListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Entitlement Item for a given year.
    """


    class MetaOapg:
        
        class properties:
            year = schemas.NumberSchema
            vacation_allowed = schemas.StrSchema
            sick_leave_allowed = schemas.StrSchema
            vacation_requested = schemas.StrSchema
            vacation_approved = schemas.StrSchema
            vacation_used = schemas.StrSchema
            vacation_total = schemas.StrSchema
            sick_leave_requested = schemas.StrSchema
            sick_leave_approved = schemas.StrSchema
            sick_leave_used = schemas.StrSchema
            sick_leave_total = schemas.StrSchema
            other_leave_requested = schemas.StrSchema
            other_leave_approved = schemas.StrSchema
            other_leave_used = schemas.StrSchema
            other_leave_total = schemas.StrSchema
        
            @staticmethod
            def rollover_type() -> typing.Type['EorHolidaysRolloverType']:
                return EorHolidaysRolloverType
            max_rollover_yearly = schemas.StrSchema
            __annotations__ = {
                "year": year,
                "vacation_allowed": vacation_allowed,
                "sick_leave_allowed": sick_leave_allowed,
                "vacation_requested": vacation_requested,
                "vacation_approved": vacation_approved,
                "vacation_used": vacation_used,
                "vacation_total": vacation_total,
                "sick_leave_requested": sick_leave_requested,
                "sick_leave_approved": sick_leave_approved,
                "sick_leave_used": sick_leave_used,
                "sick_leave_total": sick_leave_total,
                "other_leave_requested": other_leave_requested,
                "other_leave_approved": other_leave_approved,
                "other_leave_used": other_leave_used,
                "other_leave_total": other_leave_total,
                "rollover_type": rollover_type,
                "max_rollover_yearly": max_rollover_yearly,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_allowed"]) -> MetaOapg.properties.vacation_allowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leave_allowed"]) -> MetaOapg.properties.sick_leave_allowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_requested"]) -> MetaOapg.properties.vacation_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_approved"]) -> MetaOapg.properties.vacation_approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_used"]) -> MetaOapg.properties.vacation_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_total"]) -> MetaOapg.properties.vacation_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leave_requested"]) -> MetaOapg.properties.sick_leave_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leave_approved"]) -> MetaOapg.properties.sick_leave_approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leave_used"]) -> MetaOapg.properties.sick_leave_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leave_total"]) -> MetaOapg.properties.sick_leave_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_leave_requested"]) -> MetaOapg.properties.other_leave_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_leave_approved"]) -> MetaOapg.properties.other_leave_approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_leave_used"]) -> MetaOapg.properties.other_leave_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_leave_total"]) -> MetaOapg.properties.other_leave_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rollover_type"]) -> 'EorHolidaysRolloverType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_rollover_yearly"]) -> MetaOapg.properties.max_rollover_yearly: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["year", "vacation_allowed", "sick_leave_allowed", "vacation_requested", "vacation_approved", "vacation_used", "vacation_total", "sick_leave_requested", "sick_leave_approved", "sick_leave_used", "sick_leave_total", "other_leave_requested", "other_leave_approved", "other_leave_used", "other_leave_total", "rollover_type", "max_rollover_yearly", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_allowed"]) -> typing.Union[MetaOapg.properties.vacation_allowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leave_allowed"]) -> typing.Union[MetaOapg.properties.sick_leave_allowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_requested"]) -> typing.Union[MetaOapg.properties.vacation_requested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_approved"]) -> typing.Union[MetaOapg.properties.vacation_approved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_used"]) -> typing.Union[MetaOapg.properties.vacation_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_total"]) -> typing.Union[MetaOapg.properties.vacation_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leave_requested"]) -> typing.Union[MetaOapg.properties.sick_leave_requested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leave_approved"]) -> typing.Union[MetaOapg.properties.sick_leave_approved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leave_used"]) -> typing.Union[MetaOapg.properties.sick_leave_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leave_total"]) -> typing.Union[MetaOapg.properties.sick_leave_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_leave_requested"]) -> typing.Union[MetaOapg.properties.other_leave_requested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_leave_approved"]) -> typing.Union[MetaOapg.properties.other_leave_approved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_leave_used"]) -> typing.Union[MetaOapg.properties.other_leave_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_leave_total"]) -> typing.Union[MetaOapg.properties.other_leave_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rollover_type"]) -> typing.Union['EorHolidaysRolloverType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_rollover_yearly"]) -> typing.Union[MetaOapg.properties.max_rollover_yearly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["year", "vacation_allowed", "sick_leave_allowed", "vacation_requested", "vacation_approved", "vacation_used", "vacation_total", "sick_leave_requested", "sick_leave_approved", "sick_leave_used", "sick_leave_total", "other_leave_requested", "other_leave_approved", "other_leave_used", "other_leave_total", "rollover_type", "max_rollover_yearly", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vacation_allowed: typing.Union[MetaOapg.properties.vacation_allowed, str, schemas.Unset] = schemas.unset,
        sick_leave_allowed: typing.Union[MetaOapg.properties.sick_leave_allowed, str, schemas.Unset] = schemas.unset,
        vacation_requested: typing.Union[MetaOapg.properties.vacation_requested, str, schemas.Unset] = schemas.unset,
        vacation_approved: typing.Union[MetaOapg.properties.vacation_approved, str, schemas.Unset] = schemas.unset,
        vacation_used: typing.Union[MetaOapg.properties.vacation_used, str, schemas.Unset] = schemas.unset,
        vacation_total: typing.Union[MetaOapg.properties.vacation_total, str, schemas.Unset] = schemas.unset,
        sick_leave_requested: typing.Union[MetaOapg.properties.sick_leave_requested, str, schemas.Unset] = schemas.unset,
        sick_leave_approved: typing.Union[MetaOapg.properties.sick_leave_approved, str, schemas.Unset] = schemas.unset,
        sick_leave_used: typing.Union[MetaOapg.properties.sick_leave_used, str, schemas.Unset] = schemas.unset,
        sick_leave_total: typing.Union[MetaOapg.properties.sick_leave_total, str, schemas.Unset] = schemas.unset,
        other_leave_requested: typing.Union[MetaOapg.properties.other_leave_requested, str, schemas.Unset] = schemas.unset,
        other_leave_approved: typing.Union[MetaOapg.properties.other_leave_approved, str, schemas.Unset] = schemas.unset,
        other_leave_used: typing.Union[MetaOapg.properties.other_leave_used, str, schemas.Unset] = schemas.unset,
        other_leave_total: typing.Union[MetaOapg.properties.other_leave_total, str, schemas.Unset] = schemas.unset,
        rollover_type: typing.Union['EorHolidaysRolloverType', schemas.Unset] = schemas.unset,
        max_rollover_yearly: typing.Union[MetaOapg.properties.max_rollover_yearly, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorEntitlementListItem':
        return super().__new__(
            cls,
            *args,
            year=year,
            vacation_allowed=vacation_allowed,
            sick_leave_allowed=sick_leave_allowed,
            vacation_requested=vacation_requested,
            vacation_approved=vacation_approved,
            vacation_used=vacation_used,
            vacation_total=vacation_total,
            sick_leave_requested=sick_leave_requested,
            sick_leave_approved=sick_leave_approved,
            sick_leave_used=sick_leave_used,
            sick_leave_total=sick_leave_total,
            other_leave_requested=other_leave_requested,
            other_leave_approved=other_leave_approved,
            other_leave_used=other_leave_used,
            other_leave_total=other_leave_total,
            rollover_type=rollover_type,
            max_rollover_yearly=max_rollover_yearly,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_holidays_rollover_type import EorHolidaysRolloverType
