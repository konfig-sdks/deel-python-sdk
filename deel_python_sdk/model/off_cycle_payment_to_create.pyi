# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class OffCyclePaymentToCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of invoice adjustment to create.
    """


    class MetaOapg:
        required = {
            "date_submitted",
            "amount",
        }
        
        class properties:
        
            @staticmethod
            def date_submitted() -> typing.Type['DateStringRequired']:
                return DateStringRequired
            
            
            class amount(
                schemas.NumberSchema
            ):
                pass
            description = schemas.StrSchema
            __annotations__ = {
                "date_submitted": date_submitted,
                "amount": amount,
                "description": description,
            }
    
    date_submitted: 'DateStringRequired'
    amount: MetaOapg.properties.amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_submitted"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_submitted", "amount", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_submitted"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_submitted", "amount", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_submitted: 'DateStringRequired',
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OffCyclePaymentToCreate':
        return super().__new__(
            cls,
            *args,
            date_submitted=date_submitted,
            amount=amount,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_string_required import DateStringRequired
