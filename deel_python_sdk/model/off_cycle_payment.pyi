# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class OffCyclePayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date_submitted",
            "amount",
            "created_at",
            "description",
            "reported_by",
            "id",
            "currency_code",
            "status",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['InvoiceAdjustmentStatusEnum']:
                return InvoiceAdjustmentStatusEnum
            date_submitted = schemas.DateTimeSchema
        
            @staticmethod
            def currency_code() -> typing.Type['CurrencyCodeRequired']:
                return CurrencyCodeRequired
            amount = schemas.StrSchema
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def reported_by() -> typing.Type['OffCyclePaymentReportedBy']:
                return OffCyclePaymentReportedBy
            __annotations__ = {
                "description": description,
                "id": id,
                "status": status,
                "date_submitted": date_submitted,
                "currency_code": currency_code,
                "amount": amount,
                "created_at": created_at,
                "reported_by": reported_by,
            }
    
    date_submitted: MetaOapg.properties.date_submitted
    amount: MetaOapg.properties.amount
    created_at: MetaOapg.properties.created_at
    description: MetaOapg.properties.description
    reported_by: 'OffCyclePaymentReportedBy'
    id: MetaOapg.properties.id
    currency_code: 'CurrencyCodeRequired'
    status: 'InvoiceAdjustmentStatusEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'InvoiceAdjustmentStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_submitted"]) -> MetaOapg.properties.date_submitted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reported_by"]) -> 'OffCyclePaymentReportedBy': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "status", "date_submitted", "currency_code", "amount", "created_at", "reported_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'InvoiceAdjustmentStatusEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_submitted"]) -> MetaOapg.properties.date_submitted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reported_by"]) -> 'OffCyclePaymentReportedBy': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "status", "date_submitted", "currency_code", "amount", "created_at", "reported_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_submitted: typing.Union[MetaOapg.properties.date_submitted, str, datetime, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        reported_by: 'OffCyclePaymentReportedBy',
        id: typing.Union[MetaOapg.properties.id, str, ],
        currency_code: 'CurrencyCodeRequired',
        status: 'InvoiceAdjustmentStatusEnum',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OffCyclePayment':
        return super().__new__(
            cls,
            *args,
            date_submitted=date_submitted,
            amount=amount,
            created_at=created_at,
            description=description,
            reported_by=reported_by,
            id=id,
            currency_code=currency_code,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.currency_code_required import CurrencyCodeRequired
from deel_python_sdk.model.invoice_adjustment_status_enum import InvoiceAdjustmentStatusEnum
from deel_python_sdk.model.off_cycle_payment_reported_by import OffCyclePaymentReportedBy
