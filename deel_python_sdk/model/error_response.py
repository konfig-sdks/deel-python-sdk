# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class ErrorResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            detail = schemas.StrSchema
        
            @staticmethod
            def schemas() -> typing.Type['ErrorResponseSchemas']:
                return ErrorResponseSchemas
            
            
            class scimType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "uniqueness": "UNIQUENESS",
                        "tooMany": "TOO_MANY",
                        "mutability": "MUTABILITY",
                        "sensitive": "SENSITIVE",
                        "invalidSyntax": "INVALID_SYNTAX",
                        "invalidFilter": "INVALID_FILTER",
                        "invalidPath": "INVALID_PATH",
                        "invalidValue": "INVALID_VALUE",
                        "invalidVers": "INVALID_VERS",
                        "noTarget": "NO_TARGET",
                    }
                
                @schemas.classproperty
                def UNIQUENESS(cls):
                    return cls("uniqueness")
                
                @schemas.classproperty
                def TOO_MANY(cls):
                    return cls("tooMany")
                
                @schemas.classproperty
                def MUTABILITY(cls):
                    return cls("mutability")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("sensitive")
                
                @schemas.classproperty
                def INVALID_SYNTAX(cls):
                    return cls("invalidSyntax")
                
                @schemas.classproperty
                def INVALID_FILTER(cls):
                    return cls("invalidFilter")
                
                @schemas.classproperty
                def INVALID_PATH(cls):
                    return cls("invalidPath")
                
                @schemas.classproperty
                def INVALID_VALUE(cls):
                    return cls("invalidValue")
                
                @schemas.classproperty
                def INVALID_VERS(cls):
                    return cls("invalidVers")
                
                @schemas.classproperty
                def NO_TARGET(cls):
                    return cls("noTarget")
            status = schemas.StrSchema
            __annotations__ = {
                "detail": detail,
                "schemas": schemas,
                "scimType": scimType,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemas"]) -> 'ErrorResponseSchemas': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scimType"]) -> MetaOapg.properties.scimType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["detail", "schemas", "scimType", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemas"]) -> typing.Union['ErrorResponseSchemas', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scimType"]) -> typing.Union[MetaOapg.properties.scimType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["detail", "schemas", "scimType", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        schemas: typing.Union['ErrorResponseSchemas', schemas.Unset] = schemas.unset,
        scimType: typing.Union[MetaOapg.properties.scimType, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorResponse':
        return super().__new__(
            cls,
            *args,
            detail=detail,
            schemas=schemas,
            scimType=scimType,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.error_response_schemas import ErrorResponseSchemas
