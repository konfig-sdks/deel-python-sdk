# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorTimeoffsEmployeeItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "time_zones",
            "sick_leaves",
            "contract_id",
            "vacations",
            "name",
            "id",
            "eor_contract_id",
            "others",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            eor_contract_id = schemas.NumberSchema
            contract_id = schemas.StrSchema
            
            
            class vacations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EorClientTimeoffRequests']:
                        return EorClientTimeoffRequests
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EorClientTimeoffRequests'], typing.List['EorClientTimeoffRequests']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vacations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EorClientTimeoffRequests':
                    return super().__getitem__(i)
            
            
            class sick_leaves(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EorClientTimeoffRequests']:
                        return EorClientTimeoffRequests
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EorClientTimeoffRequests'], typing.List['EorClientTimeoffRequests']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sick_leaves':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EorClientTimeoffRequests':
                    return super().__getitem__(i)
            
            
            class others(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EorClientTimeoffRequests']:
                        return EorClientTimeoffRequests
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EorClientTimeoffRequests'], typing.List['EorClientTimeoffRequests']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'others':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EorClientTimeoffRequests':
                    return super().__getitem__(i)
            time_zones = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "eor_contract_id": eor_contract_id,
                "contract_id": contract_id,
                "vacations": vacations,
                "sick_leaves": sick_leaves,
                "others": others,
                "time_zones": time_zones,
            }
    
    time_zones: MetaOapg.properties.time_zones
    sick_leaves: MetaOapg.properties.sick_leaves
    contract_id: MetaOapg.properties.contract_id
    vacations: MetaOapg.properties.vacations
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    eor_contract_id: MetaOapg.properties.eor_contract_id
    others: MetaOapg.properties.others
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eor_contract_id"]) -> MetaOapg.properties.eor_contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacations"]) -> MetaOapg.properties.vacations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_leaves"]) -> MetaOapg.properties.sick_leaves: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["others"]) -> MetaOapg.properties.others: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_zones"]) -> MetaOapg.properties.time_zones: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "eor_contract_id", "contract_id", "vacations", "sick_leaves", "others", "time_zones", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eor_contract_id"]) -> MetaOapg.properties.eor_contract_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacations"]) -> MetaOapg.properties.vacations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_leaves"]) -> MetaOapg.properties.sick_leaves: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["others"]) -> MetaOapg.properties.others: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_zones"]) -> MetaOapg.properties.time_zones: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "eor_contract_id", "contract_id", "vacations", "sick_leaves", "others", "time_zones", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        time_zones: typing.Union[MetaOapg.properties.time_zones, str, ],
        sick_leaves: typing.Union[MetaOapg.properties.sick_leaves, list, tuple, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, ],
        vacations: typing.Union[MetaOapg.properties.vacations, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        eor_contract_id: typing.Union[MetaOapg.properties.eor_contract_id, decimal.Decimal, int, float, ],
        others: typing.Union[MetaOapg.properties.others, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorTimeoffsEmployeeItem':
        return super().__new__(
            cls,
            *args,
            time_zones=time_zones,
            sick_leaves=sick_leaves,
            contract_id=contract_id,
            vacations=vacations,
            name=name,
            id=id,
            eor_contract_id=eor_contract_id,
            others=others,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_client_timeoff_requests import EorClientTimeoffRequests
