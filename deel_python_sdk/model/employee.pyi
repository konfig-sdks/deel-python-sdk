# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class Employee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
            full_name = schemas.StrSchema
            
            
            class addresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Address']:
                        return Address
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Address'], typing.List['Address']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addresses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Address':
                    return super().__getitem__(i)
            
            
            class emails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Email']:
                        return Email
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Email'], typing.List['Email']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emails':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Email':
                    return super().__getitem__(i)
            birth_date = schemas.StrSchema
            start_date = schemas.DateSchema
            nationality = schemas.StrSchema
        
            @staticmethod
            def client_legal_entity() -> typing.Type['PeopleClientLegalEntity']:
                return PeopleClientLegalEntity
            state = schemas.StrSchema
            seniority = schemas.StrSchema
            
            
            class completion_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'completion_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def direct_manager() -> typing.Type['EmployeeDirectManager']:
                return EmployeeDirectManager
        
            @staticmethod
            def direct_reports() -> typing.Type['EmployeeDirectReports']:
                return EmployeeDirectReports
            direct_reports_count = schemas.IntSchema
            
            
            class employments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmploymentDetail']:
                        return EmploymentDetail
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmploymentDetail'], typing.List['EmploymentDetail']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmploymentDetail':
                    return super().__getitem__(i)
            hiring_status = schemas.StrSchema
            new_hiring_status = schemas.StrSchema
            hiring_type = schemas.StrSchema
            job_title = schemas.StrSchema
            country = schemas.StrSchema
            timezone = schemas.StrSchema
        
            @staticmethod
            def department() -> typing.Type['EmployeeDepartment']:
                return EmployeeDepartment
            work_location = schemas.StrSchema
        
            @staticmethod
            def updated_at() -> typing.Type['DateTimeString']:
                return DateTimeString
            __annotations__ = {
                "id": id,
                "created_at": created_at,
                "first_name": first_name,
                "last_name": last_name,
                "full_name": full_name,
                "addresses": addresses,
                "emails": emails,
                "birth_date": birth_date,
                "start_date": start_date,
                "nationality": nationality,
                "client_legal_entity": client_legal_entity,
                "state": state,
                "seniority": seniority,
                "completion_date": completion_date,
                "direct_manager": direct_manager,
                "direct_reports": direct_reports,
                "direct_reports_count": direct_reports_count,
                "employments": employments,
                "hiring_status": hiring_status,
                "new_hiring_status": new_hiring_status,
                "hiring_type": hiring_type,
                "job_title": job_title,
                "country": country,
                "timezone": timezone,
                "department": department,
                "work_location": work_location,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_legal_entity"]) -> 'PeopleClientLegalEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seniority"]) -> MetaOapg.properties.seniority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_date"]) -> MetaOapg.properties.completion_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_manager"]) -> 'EmployeeDirectManager': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_reports"]) -> 'EmployeeDirectReports': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_reports_count"]) -> MetaOapg.properties.direct_reports_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employments"]) -> MetaOapg.properties.employments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_status"]) -> MetaOapg.properties.hiring_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_hiring_status"]) -> MetaOapg.properties.new_hiring_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_type"]) -> MetaOapg.properties.hiring_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'EmployeeDepartment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_location"]) -> MetaOapg.properties.work_location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "first_name", "last_name", "full_name", "addresses", "emails", "birth_date", "start_date", "nationality", "client_legal_entity", "state", "seniority", "completion_date", "direct_manager", "direct_reports", "direct_reports_count", "employments", "hiring_status", "new_hiring_status", "hiring_type", "job_title", "country", "timezone", "department", "work_location", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> typing.Union[MetaOapg.properties.addresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> typing.Union[MetaOapg.properties.emails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union[MetaOapg.properties.birth_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union[MetaOapg.properties.nationality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_legal_entity"]) -> typing.Union['PeopleClientLegalEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seniority"]) -> typing.Union[MetaOapg.properties.seniority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_date"]) -> typing.Union[MetaOapg.properties.completion_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_manager"]) -> typing.Union['EmployeeDirectManager', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_reports"]) -> typing.Union['EmployeeDirectReports', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_reports_count"]) -> typing.Union[MetaOapg.properties.direct_reports_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employments"]) -> typing.Union[MetaOapg.properties.employments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_status"]) -> typing.Union[MetaOapg.properties.hiring_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_hiring_status"]) -> typing.Union[MetaOapg.properties.new_hiring_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_type"]) -> typing.Union[MetaOapg.properties.hiring_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['EmployeeDepartment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_location"]) -> typing.Union[MetaOapg.properties.work_location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union['DateTimeString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "first_name", "last_name", "full_name", "addresses", "emails", "birth_date", "start_date", "nationality", "client_legal_entity", "state", "seniority", "completion_date", "direct_manager", "direct_reports", "direct_reports_count", "employments", "hiring_status", "new_hiring_status", "hiring_type", "job_title", "country", "timezone", "department", "work_location", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        addresses: typing.Union[MetaOapg.properties.addresses, list, tuple, schemas.Unset] = schemas.unset,
        emails: typing.Union[MetaOapg.properties.emails, list, tuple, schemas.Unset] = schemas.unset,
        birth_date: typing.Union[MetaOapg.properties.birth_date, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, schemas.Unset] = schemas.unset,
        nationality: typing.Union[MetaOapg.properties.nationality, str, schemas.Unset] = schemas.unset,
        client_legal_entity: typing.Union['PeopleClientLegalEntity', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        seniority: typing.Union[MetaOapg.properties.seniority, str, schemas.Unset] = schemas.unset,
        completion_date: typing.Union[MetaOapg.properties.completion_date, None, str, schemas.Unset] = schemas.unset,
        direct_manager: typing.Union['EmployeeDirectManager', schemas.Unset] = schemas.unset,
        direct_reports: typing.Union['EmployeeDirectReports', schemas.Unset] = schemas.unset,
        direct_reports_count: typing.Union[MetaOapg.properties.direct_reports_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employments: typing.Union[MetaOapg.properties.employments, list, tuple, schemas.Unset] = schemas.unset,
        hiring_status: typing.Union[MetaOapg.properties.hiring_status, str, schemas.Unset] = schemas.unset,
        new_hiring_status: typing.Union[MetaOapg.properties.new_hiring_status, str, schemas.Unset] = schemas.unset,
        hiring_type: typing.Union[MetaOapg.properties.hiring_type, str, schemas.Unset] = schemas.unset,
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        department: typing.Union['EmployeeDepartment', schemas.Unset] = schemas.unset,
        work_location: typing.Union[MetaOapg.properties.work_location, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union['DateTimeString', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Employee':
        return super().__new__(
            cls,
            *args,
            id=id,
            created_at=created_at,
            first_name=first_name,
            last_name=last_name,
            full_name=full_name,
            addresses=addresses,
            emails=emails,
            birth_date=birth_date,
            start_date=start_date,
            nationality=nationality,
            client_legal_entity=client_legal_entity,
            state=state,
            seniority=seniority,
            completion_date=completion_date,
            direct_manager=direct_manager,
            direct_reports=direct_reports,
            direct_reports_count=direct_reports_count,
            employments=employments,
            hiring_status=hiring_status,
            new_hiring_status=new_hiring_status,
            hiring_type=hiring_type,
            job_title=job_title,
            country=country,
            timezone=timezone,
            department=department,
            work_location=work_location,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.address import Address
from deel_python_sdk.model.date_time_string import DateTimeString
from deel_python_sdk.model.email import Email
from deel_python_sdk.model.employee_department import EmployeeDepartment
from deel_python_sdk.model.employee_direct_manager import EmployeeDirectManager
from deel_python_sdk.model.employee_direct_reports import EmployeeDirectReports
from deel_python_sdk.model.employment_detail import EmploymentDetail
from deel_python_sdk.model.people_client_legal_entity import PeopleClientLegalEntity
