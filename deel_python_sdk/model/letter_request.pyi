# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class LetterRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "description",
            "type",
        }
        
        class properties:
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def VISA_APPLICATION_FOR_PERSONAL_TRIP(cls):
                    return cls("VISA_APPLICATION_FOR_PERSONAL_TRIP")
                
                @schemas.classproperty
                def VISA_APPLICATION_FOR_BUSINESS_TRIP(cls):
                    return cls("VISA_APPLICATION_FOR_BUSINESS_TRIP")
                
                @schemas.classproperty
                def VISA_RENEWAL_CERTIFICATE(cls):
                    return cls("VISA_RENEWAL_CERTIFICATE")
                
                @schemas.classproperty
                def NO_OBJECTION_CERTIFICATE_FOR_TRAVELLING(cls):
                    return cls("NO_OBJECTION_CERTIFICATE_FOR_TRAVELLING")
                
                @schemas.classproperty
                def BANK_VERIFICATION_OR_SALARY_CERTIFICATE(cls):
                    return cls("BANK_VERIFICATION_OR_SALARY_CERTIFICATE")
                
                @schemas.classproperty
                def CUSTOMISED(cls):
                    return cls("CUSTOMISED")
            includeQRCode = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "type": type,
                "includeQRCode": includeQRCode,
            }
    
    description: MetaOapg.properties.description
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeQRCode"]) -> MetaOapg.properties.includeQRCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "type", "includeQRCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeQRCode"]) -> typing.Union[MetaOapg.properties.includeQRCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "type", "includeQRCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        includeQRCode: typing.Union[MetaOapg.properties.includeQRCode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LetterRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            type=type,
            includeQRCode=includeQRCode,
            _configuration=_configuration,
            **kwargs,
        )
