# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorQuoteBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    EOR quote approved by Deel
    """


    class MetaOapg:
        
        class properties:
            annual_salary = schemas.NumberSchema
        
            @staticmethod
            def currency() -> typing.Type['CurrencyCodeRequired']:
                return CurrencyCodeRequired
        
            @staticmethod
            def breakdown_costs() -> typing.Type['BreakdownCostsQuote']:
                return BreakdownCostsQuote
            severance_accrual_total = schemas.NumberSchema
            severance_accrual_total_usd = schemas.NumberSchema
            recurring_allowance_total = schemas.NumberSchema
            recurring_allowance_total_usd = schemas.NumberSchema
            salary_total = schemas.NumberSchema
            salary_total_usd = schemas.NumberSchema
            employer_cost_total = schemas.NumberSchema
            employer_cost_total_usd = schemas.NumberSchema
            platform_fee_total = schemas.NumberSchema
            platform_fee_total_usd = schemas.NumberSchema
            mobility_fee_total = schemas.NumberSchema
            mobility_fee_total_usd = schemas.NumberSchema
            monthly_cost_total = schemas.NumberSchema
            monthly_cost_total_usd = schemas.NumberSchema
            gross_salary_total = schemas.NumberSchema
            gross_salary_total_usd = schemas.NumberSchema
            cba_total = schemas.NumberSchema
            cba_total_usd = schemas.NumberSchema
        
            @staticmethod
            def created_at() -> typing.Type['DateString']:
                return DateString
        
            @staticmethod
            def updated_at() -> typing.Type['DateString']:
                return DateString
            __annotations__ = {
                "annual_salary": annual_salary,
                "currency": currency,
                "breakdown_costs": breakdown_costs,
                "severance_accrual_total": severance_accrual_total,
                "severance_accrual_total_usd": severance_accrual_total_usd,
                "recurring_allowance_total": recurring_allowance_total,
                "recurring_allowance_total_usd": recurring_allowance_total_usd,
                "salary_total": salary_total,
                "salary_total_usd": salary_total_usd,
                "employer_cost_total": employer_cost_total,
                "employer_cost_total_usd": employer_cost_total_usd,
                "platform_fee_total": platform_fee_total,
                "platform_fee_total_usd": platform_fee_total_usd,
                "mobility_fee_total": mobility_fee_total,
                "mobility_fee_total_usd": mobility_fee_total_usd,
                "monthly_cost_total": monthly_cost_total,
                "monthly_cost_total_usd": monthly_cost_total_usd,
                "gross_salary_total": gross_salary_total,
                "gross_salary_total_usd": gross_salary_total_usd,
                "cba_total": cba_total,
                "cba_total_usd": cba_total_usd,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_salary"]) -> MetaOapg.properties.annual_salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdown_costs"]) -> 'BreakdownCostsQuote': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severance_accrual_total"]) -> MetaOapg.properties.severance_accrual_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severance_accrual_total_usd"]) -> MetaOapg.properties.severance_accrual_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring_allowance_total"]) -> MetaOapg.properties.recurring_allowance_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring_allowance_total_usd"]) -> MetaOapg.properties.recurring_allowance_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary_total"]) -> MetaOapg.properties.salary_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary_total_usd"]) -> MetaOapg.properties.salary_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_cost_total"]) -> MetaOapg.properties.employer_cost_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_cost_total_usd"]) -> MetaOapg.properties.employer_cost_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform_fee_total"]) -> MetaOapg.properties.platform_fee_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform_fee_total_usd"]) -> MetaOapg.properties.platform_fee_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobility_fee_total"]) -> MetaOapg.properties.mobility_fee_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobility_fee_total_usd"]) -> MetaOapg.properties.mobility_fee_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_cost_total"]) -> MetaOapg.properties.monthly_cost_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_cost_total_usd"]) -> MetaOapg.properties.monthly_cost_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_salary_total"]) -> MetaOapg.properties.gross_salary_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_salary_total_usd"]) -> MetaOapg.properties.gross_salary_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cba_total"]) -> MetaOapg.properties.cba_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cba_total_usd"]) -> MetaOapg.properties.cba_total_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annual_salary", "currency", "breakdown_costs", "severance_accrual_total", "severance_accrual_total_usd", "recurring_allowance_total", "recurring_allowance_total_usd", "salary_total", "salary_total_usd", "employer_cost_total", "employer_cost_total_usd", "platform_fee_total", "platform_fee_total_usd", "mobility_fee_total", "mobility_fee_total_usd", "monthly_cost_total", "monthly_cost_total_usd", "gross_salary_total", "gross_salary_total_usd", "cba_total", "cba_total_usd", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_salary"]) -> typing.Union[MetaOapg.properties.annual_salary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['CurrencyCodeRequired', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdown_costs"]) -> typing.Union['BreakdownCostsQuote', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severance_accrual_total"]) -> typing.Union[MetaOapg.properties.severance_accrual_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severance_accrual_total_usd"]) -> typing.Union[MetaOapg.properties.severance_accrual_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring_allowance_total"]) -> typing.Union[MetaOapg.properties.recurring_allowance_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring_allowance_total_usd"]) -> typing.Union[MetaOapg.properties.recurring_allowance_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary_total"]) -> typing.Union[MetaOapg.properties.salary_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary_total_usd"]) -> typing.Union[MetaOapg.properties.salary_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_cost_total"]) -> typing.Union[MetaOapg.properties.employer_cost_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_cost_total_usd"]) -> typing.Union[MetaOapg.properties.employer_cost_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform_fee_total"]) -> typing.Union[MetaOapg.properties.platform_fee_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform_fee_total_usd"]) -> typing.Union[MetaOapg.properties.platform_fee_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobility_fee_total"]) -> typing.Union[MetaOapg.properties.mobility_fee_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobility_fee_total_usd"]) -> typing.Union[MetaOapg.properties.mobility_fee_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_cost_total"]) -> typing.Union[MetaOapg.properties.monthly_cost_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_cost_total_usd"]) -> typing.Union[MetaOapg.properties.monthly_cost_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_salary_total"]) -> typing.Union[MetaOapg.properties.gross_salary_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_salary_total_usd"]) -> typing.Union[MetaOapg.properties.gross_salary_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cba_total"]) -> typing.Union[MetaOapg.properties.cba_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cba_total_usd"]) -> typing.Union[MetaOapg.properties.cba_total_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annual_salary", "currency", "breakdown_costs", "severance_accrual_total", "severance_accrual_total_usd", "recurring_allowance_total", "recurring_allowance_total_usd", "salary_total", "salary_total_usd", "employer_cost_total", "employer_cost_total_usd", "platform_fee_total", "platform_fee_total_usd", "mobility_fee_total", "mobility_fee_total_usd", "monthly_cost_total", "monthly_cost_total_usd", "gross_salary_total", "gross_salary_total_usd", "cba_total", "cba_total_usd", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        annual_salary: typing.Union[MetaOapg.properties.annual_salary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union['CurrencyCodeRequired', schemas.Unset] = schemas.unset,
        breakdown_costs: typing.Union['BreakdownCostsQuote', schemas.Unset] = schemas.unset,
        severance_accrual_total: typing.Union[MetaOapg.properties.severance_accrual_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        severance_accrual_total_usd: typing.Union[MetaOapg.properties.severance_accrual_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurring_allowance_total: typing.Union[MetaOapg.properties.recurring_allowance_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurring_allowance_total_usd: typing.Union[MetaOapg.properties.recurring_allowance_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salary_total: typing.Union[MetaOapg.properties.salary_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salary_total_usd: typing.Union[MetaOapg.properties.salary_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employer_cost_total: typing.Union[MetaOapg.properties.employer_cost_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employer_cost_total_usd: typing.Union[MetaOapg.properties.employer_cost_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        platform_fee_total: typing.Union[MetaOapg.properties.platform_fee_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        platform_fee_total_usd: typing.Union[MetaOapg.properties.platform_fee_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mobility_fee_total: typing.Union[MetaOapg.properties.mobility_fee_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mobility_fee_total_usd: typing.Union[MetaOapg.properties.mobility_fee_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthly_cost_total: typing.Union[MetaOapg.properties.monthly_cost_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthly_cost_total_usd: typing.Union[MetaOapg.properties.monthly_cost_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gross_salary_total: typing.Union[MetaOapg.properties.gross_salary_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gross_salary_total_usd: typing.Union[MetaOapg.properties.gross_salary_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cba_total: typing.Union[MetaOapg.properties.cba_total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cba_total_usd: typing.Union[MetaOapg.properties.cba_total_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        created_at: typing.Union['DateString', schemas.Unset] = schemas.unset,
        updated_at: typing.Union['DateString', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorQuoteBase':
        return super().__new__(
            cls,
            *args,
            annual_salary=annual_salary,
            currency=currency,
            breakdown_costs=breakdown_costs,
            severance_accrual_total=severance_accrual_total,
            severance_accrual_total_usd=severance_accrual_total_usd,
            recurring_allowance_total=recurring_allowance_total,
            recurring_allowance_total_usd=recurring_allowance_total_usd,
            salary_total=salary_total,
            salary_total_usd=salary_total_usd,
            employer_cost_total=employer_cost_total,
            employer_cost_total_usd=employer_cost_total_usd,
            platform_fee_total=platform_fee_total,
            platform_fee_total_usd=platform_fee_total_usd,
            mobility_fee_total=mobility_fee_total,
            mobility_fee_total_usd=mobility_fee_total_usd,
            monthly_cost_total=monthly_cost_total,
            monthly_cost_total_usd=monthly_cost_total_usd,
            gross_salary_total=gross_salary_total,
            gross_salary_total_usd=gross_salary_total_usd,
            cba_total=cba_total,
            cba_total_usd=cba_total_usd,
            created_at=created_at,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.breakdown_costs_quote import BreakdownCostsQuote
from deel_python_sdk.model.currency_code_required import CurrencyCodeRequired
from deel_python_sdk.model.date_string import DateString
