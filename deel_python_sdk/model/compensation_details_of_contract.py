# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class CompensationDetailsOfContract(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "first_payment",
            "scale",
            "gross_annual_salary",
            "first_payment_date",
            "currency_code",
            "gross_variable_bonus",
            "frequency",
            "gross_signing_bonus",
        }
        
        class properties:
        
            @staticmethod
            def currency_code() -> typing.Type['CurrencyCodeRequired']:
                return CurrencyCodeRequired
            amount = schemas.StrSchema
            scale = schemas.StrSchema
            frequency = schemas.StrSchema
            first_payment = schemas.StrSchema
        
            @staticmethod
            def first_payment_date() -> typing.Type['DateTimeString']:
                return DateTimeString
            gross_annual_salary = schemas.StrSchema
            gross_signing_bonus = schemas.StrSchema
            gross_variable_bonus = schemas.StrSchema
            __annotations__ = {
                "currency_code": currency_code,
                "amount": amount,
                "scale": scale,
                "frequency": frequency,
                "first_payment": first_payment,
                "first_payment_date": first_payment_date,
                "gross_annual_salary": gross_annual_salary,
                "gross_signing_bonus": gross_signing_bonus,
                "gross_variable_bonus": gross_variable_bonus,
            }
    
    amount: MetaOapg.properties.amount
    first_payment: MetaOapg.properties.first_payment
    scale: MetaOapg.properties.scale
    gross_annual_salary: MetaOapg.properties.gross_annual_salary
    first_payment_date: 'DateTimeString'
    currency_code: 'CurrencyCodeRequired'
    gross_variable_bonus: MetaOapg.properties.gross_variable_bonus
    frequency: MetaOapg.properties.frequency
    gross_signing_bonus: MetaOapg.properties.gross_signing_bonus
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scale"]) -> MetaOapg.properties.scale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_payment"]) -> MetaOapg.properties.first_payment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_payment_date"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_annual_salary"]) -> MetaOapg.properties.gross_annual_salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_signing_bonus"]) -> MetaOapg.properties.gross_signing_bonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_variable_bonus"]) -> MetaOapg.properties.gross_variable_bonus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_code", "amount", "scale", "frequency", "first_payment", "first_payment_date", "gross_annual_salary", "gross_signing_bonus", "gross_variable_bonus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scale"]) -> MetaOapg.properties.scale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_payment"]) -> MetaOapg.properties.first_payment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_payment_date"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_annual_salary"]) -> MetaOapg.properties.gross_annual_salary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_signing_bonus"]) -> MetaOapg.properties.gross_signing_bonus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_variable_bonus"]) -> MetaOapg.properties.gross_variable_bonus: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_code", "amount", "scale", "frequency", "first_payment", "first_payment_date", "gross_annual_salary", "gross_signing_bonus", "gross_variable_bonus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        first_payment: typing.Union[MetaOapg.properties.first_payment, str, ],
        scale: typing.Union[MetaOapg.properties.scale, str, ],
        gross_annual_salary: typing.Union[MetaOapg.properties.gross_annual_salary, str, ],
        first_payment_date: 'DateTimeString',
        currency_code: 'CurrencyCodeRequired',
        gross_variable_bonus: typing.Union[MetaOapg.properties.gross_variable_bonus, str, ],
        frequency: typing.Union[MetaOapg.properties.frequency, str, ],
        gross_signing_bonus: typing.Union[MetaOapg.properties.gross_signing_bonus, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompensationDetailsOfContract':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            first_payment=first_payment,
            scale=scale,
            gross_annual_salary=gross_annual_salary,
            first_payment_date=first_payment_date,
            currency_code=currency_code,
            gross_variable_bonus=gross_variable_bonus,
            frequency=frequency,
            gross_signing_bonus=gross_signing_bonus,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.currency_code_required import CurrencyCodeRequired
from deel_python_sdk.model.date_time_string import DateTimeString
