# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class BasicContract(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "is_shielded",
            "is_archived",
            "invitations",
            "termination_date",
            "client",
            "created_at",
            "id",
            "title",
            "type",
            "worker",
            "signatures",
            "status",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def type() -> typing.Type['ContractTypeEnum']:
                return ContractTypeEnum
        
            @staticmethod
            def status() -> typing.Type['ContractStatusEnum']:
                return ContractStatusEnum
        
            @staticmethod
            def client() -> typing.Type['ClientOfBasicContract']:
                return ClientOfBasicContract
        
            @staticmethod
            def worker() -> typing.Type['WorkerOfBasicContract']:
                return WorkerOfBasicContract
        
            @staticmethod
            def invitations() -> typing.Type['InvitationsOfBasicContract']:
                return InvitationsOfBasicContract
        
            @staticmethod
            def signatures() -> typing.Type['SignaturesOfBasicContract']:
                return SignaturesOfBasicContract
            is_shielded = schemas.BoolSchema
            is_archived = schemas.BoolSchema
        
            @staticmethod
            def created_at() -> typing.Type['DateTimeString']:
                return DateTimeString
        
            @staticmethod
            def termination_date() -> typing.Type['DateTimeString']:
                return DateTimeString
        
            @staticmethod
            def notice_period() -> typing.Type['NoticePeriod']:
                return NoticePeriod
            
            
            class scale(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scale':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def who_reports() -> typing.Type['ContractWhoReportsEnum']:
                return ContractWhoReportsEnum
            
            
            class external_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "title": title,
                "id": id,
                "type": type,
                "status": status,
                "client": client,
                "worker": worker,
                "invitations": invitations,
                "signatures": signatures,
                "is_shielded": is_shielded,
                "is_archived": is_archived,
                "created_at": created_at,
                "termination_date": termination_date,
                "notice_period": notice_period,
                "scale": scale,
                "who_reports": who_reports,
                "external_id": external_id,
            }
    
    is_shielded: MetaOapg.properties.is_shielded
    is_archived: MetaOapg.properties.is_archived
    invitations: 'InvitationsOfBasicContract'
    termination_date: 'DateTimeString'
    client: 'ClientOfBasicContract'
    created_at: 'DateTimeString'
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    type: 'ContractTypeEnum'
    worker: 'WorkerOfBasicContract'
    signatures: 'SignaturesOfBasicContract'
    status: 'ContractStatusEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ContractTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ContractStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'ClientOfBasicContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker"]) -> 'WorkerOfBasicContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invitations"]) -> 'InvitationsOfBasicContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatures"]) -> 'SignaturesOfBasicContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_shielded"]) -> MetaOapg.properties.is_shielded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_date"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notice_period"]) -> 'NoticePeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scale"]) -> MetaOapg.properties.scale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["who_reports"]) -> 'ContractWhoReportsEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "type", "status", "client", "worker", "invitations", "signatures", "is_shielded", "is_archived", "created_at", "termination_date", "notice_period", "scale", "who_reports", "external_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ContractTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ContractStatusEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> 'ClientOfBasicContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker"]) -> 'WorkerOfBasicContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invitations"]) -> 'InvitationsOfBasicContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatures"]) -> 'SignaturesOfBasicContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_shielded"]) -> MetaOapg.properties.is_shielded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_date"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notice_period"]) -> typing.Union['NoticePeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scale"]) -> typing.Union[MetaOapg.properties.scale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["who_reports"]) -> typing.Union['ContractWhoReportsEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "type", "status", "client", "worker", "invitations", "signatures", "is_shielded", "is_archived", "created_at", "termination_date", "notice_period", "scale", "who_reports", "external_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_shielded: typing.Union[MetaOapg.properties.is_shielded, bool, ],
        is_archived: typing.Union[MetaOapg.properties.is_archived, bool, ],
        invitations: 'InvitationsOfBasicContract',
        termination_date: 'DateTimeString',
        client: 'ClientOfBasicContract',
        created_at: 'DateTimeString',
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: 'ContractTypeEnum',
        worker: 'WorkerOfBasicContract',
        signatures: 'SignaturesOfBasicContract',
        status: 'ContractStatusEnum',
        notice_period: typing.Union['NoticePeriod', schemas.Unset] = schemas.unset,
        scale: typing.Union[MetaOapg.properties.scale, None, str, schemas.Unset] = schemas.unset,
        who_reports: typing.Union['ContractWhoReportsEnum', schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BasicContract':
        return super().__new__(
            cls,
            *args,
            is_shielded=is_shielded,
            is_archived=is_archived,
            invitations=invitations,
            termination_date=termination_date,
            client=client,
            created_at=created_at,
            id=id,
            title=title,
            type=type,
            worker=worker,
            signatures=signatures,
            status=status,
            notice_period=notice_period,
            scale=scale,
            who_reports=who_reports,
            external_id=external_id,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.client_of_basic_contract import ClientOfBasicContract
from deel_python_sdk.model.contract_status_enum import ContractStatusEnum
from deel_python_sdk.model.contract_type_enum import ContractTypeEnum
from deel_python_sdk.model.contract_who_reports_enum import ContractWhoReportsEnum
from deel_python_sdk.model.date_time_string import DateTimeString
from deel_python_sdk.model.invitations_of_basic_contract import InvitationsOfBasicContract
from deel_python_sdk.model.notice_period import NoticePeriod
from deel_python_sdk.model.signatures_of_basic_contract import SignaturesOfBasicContract
from deel_python_sdk.model.worker_of_basic_contract import WorkerOfBasicContract
