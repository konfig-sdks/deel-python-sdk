# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class Milestone(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "reviewed_by",
            "approval_requested",
            "created_at",
            "description",
            "reported_by",
            "id",
            "title",
            "status",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            id = schemas.StrSchema
            amount = schemas.StrSchema
            approval_requested = schemas.BoolSchema
        
            @staticmethod
            def reviewed_by() -> typing.Type['MilestoneReviewedBy']:
                return MilestoneReviewedBy
        
            @staticmethod
            def reported_by() -> typing.Type['MilestoneReportedBy']:
                return MilestoneReportedBy
            status = schemas.StrSchema
        
            @staticmethod
            def created_at() -> typing.Type['DateTimeString']:
                return DateTimeString
            __annotations__ = {
                "title": title,
                "description": description,
                "id": id,
                "amount": amount,
                "approval_requested": approval_requested,
                "reviewed_by": reviewed_by,
                "reported_by": reported_by,
                "status": status,
                "created_at": created_at,
            }
    
    amount: MetaOapg.properties.amount
    reviewed_by: 'MilestoneReviewedBy'
    approval_requested: MetaOapg.properties.approval_requested
    created_at: 'DateTimeString'
    description: MetaOapg.properties.description
    reported_by: 'MilestoneReportedBy'
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_requested"]) -> MetaOapg.properties.approval_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_by"]) -> 'MilestoneReviewedBy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reported_by"]) -> 'MilestoneReportedBy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "amount", "approval_requested", "reviewed_by", "reported_by", "status", "created_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_requested"]) -> MetaOapg.properties.approval_requested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_by"]) -> 'MilestoneReviewedBy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reported_by"]) -> 'MilestoneReportedBy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "amount", "approval_requested", "reviewed_by", "reported_by", "status", "created_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        reviewed_by: 'MilestoneReviewedBy',
        approval_requested: typing.Union[MetaOapg.properties.approval_requested, bool, ],
        created_at: 'DateTimeString',
        description: typing.Union[MetaOapg.properties.description, str, ],
        reported_by: 'MilestoneReportedBy',
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Milestone':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            reviewed_by=reviewed_by,
            approval_requested=approval_requested,
            created_at=created_at,
            description=description,
            reported_by=reported_by,
            id=id,
            title=title,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_time_string import DateTimeString
from deel_python_sdk.model.milestone_reported_by import MilestoneReportedBy
from deel_python_sdk.model.milestone_reviewed_by import MilestoneReviewedBy
