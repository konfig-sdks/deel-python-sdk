# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class HrisContractBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "contract_oid",
            "employment_type",
            "start_date",
        }
        
        class properties:
            contract_oid = schemas.StrSchema
        
            @staticmethod
            def start_date() -> typing.Type['DateStringRequired']:
                return DateStringRequired
            employee_number = schemas.NumberSchema
        
            @staticmethod
            def end_date() -> typing.Type['DateString']:
                return DateString
            __annotations__ = {
                "contract_oid": contract_oid,
                "start_date": start_date,
                "employee_number": employee_number,
                "end_date": end_date,
            }
    
    contract_oid: MetaOapg.properties.contract_oid
    employment_type: schemas.AnyTypeSchema
    start_date: 'DateStringRequired'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_number"]) -> MetaOapg.properties.employee_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_oid", "start_date", "employee_number", "end_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_oid"]) -> MetaOapg.properties.contract_oid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_number"]) -> typing.Union[MetaOapg.properties.employee_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_oid", "start_date", "employee_number", "end_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_oid: typing.Union[MetaOapg.properties.contract_oid, str, ],
        employment_type: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        start_date: 'DateStringRequired',
        employee_number: typing.Union[MetaOapg.properties.employee_number, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        end_date: typing.Union['DateString', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HrisContractBase':
        return super().__new__(
            cls,
            *args,
            contract_oid=contract_oid,
            employment_type=employment_type,
            start_date=start_date,
            employee_number=employee_number,
            end_date=end_date,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_string import DateString
from deel_python_sdk.model.date_string_required import DateStringRequired
