# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmploymentDetail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def team() -> typing.Type['EmploymentDetailTeam']:
                return EmploymentDetailTeam
            email = schemas.StrSchema
            state = schemas.StrSchema
            country = schemas.StrSchema
        
            @staticmethod
            def payment() -> typing.Type['PeoplePayment']:
                return PeoplePayment
            is_ended = schemas.BoolSchema
            timezone = schemas.StrSchema
            job_title = schemas.StrSchema
            seniority = schemas.StrSchema
            start_date = schemas.DateSchema
            work_email = schemas.StrSchema
            hiring_type = schemas.StrSchema
            hiring_status = schemas.StrSchema
            completion_date = schemas.StrSchema
            contract_status = schemas.StrSchema
            voluntarily_left = schemas.StrSchema
        
            @staticmethod
            def contract_coverage() -> typing.Type['EmploymentDetailContractCoverage']:
                return EmploymentDetailContractCoverage
            new_hiring_status = schemas.StrSchema
        
            @staticmethod
            def client_legal_entity() -> typing.Type['PeopleClientLegalEntity']:
                return PeopleClientLegalEntity
            has_eor_termination = schemas.StrSchema
            contract_is_archived = schemas.BoolSchema
            contract_has_contractor = schemas.BoolSchema
            is_user_contract_deleted = schemas.BoolSchema
            hris_direct_employee_invitation = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "team": team,
                "email": email,
                "state": state,
                "country": country,
                "payment": payment,
                "is_ended": is_ended,
                "timezone": timezone,
                "job_title": job_title,
                "seniority": seniority,
                "start_date": start_date,
                "work_email": work_email,
                "hiring_type": hiring_type,
                "hiring_status": hiring_status,
                "completion_date": completion_date,
                "contract_status": contract_status,
                "voluntarily_left": voluntarily_left,
                "contract_coverage": contract_coverage,
                "new_hiring_status": new_hiring_status,
                "client_legal_entity": client_legal_entity,
                "has_eor_termination": has_eor_termination,
                "contract_is_archived": contract_is_archived,
                "contract_has_contractor": contract_has_contractor,
                "is_user_contract_deleted": is_user_contract_deleted,
                "hris_direct_employee_invitation": hris_direct_employee_invitation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'EmploymentDetailTeam': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> 'PeoplePayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ended"]) -> MetaOapg.properties.is_ended: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seniority"]) -> MetaOapg.properties.seniority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_email"]) -> MetaOapg.properties.work_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_type"]) -> MetaOapg.properties.hiring_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_status"]) -> MetaOapg.properties.hiring_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_date"]) -> MetaOapg.properties.completion_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_status"]) -> MetaOapg.properties.contract_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voluntarily_left"]) -> MetaOapg.properties.voluntarily_left: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_coverage"]) -> 'EmploymentDetailContractCoverage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_hiring_status"]) -> MetaOapg.properties.new_hiring_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_legal_entity"]) -> 'PeopleClientLegalEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_eor_termination"]) -> MetaOapg.properties.has_eor_termination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_is_archived"]) -> MetaOapg.properties.contract_is_archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_has_contractor"]) -> MetaOapg.properties.contract_has_contractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_user_contract_deleted"]) -> MetaOapg.properties.is_user_contract_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hris_direct_employee_invitation"]) -> MetaOapg.properties.hris_direct_employee_invitation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "team", "email", "state", "country", "payment", "is_ended", "timezone", "job_title", "seniority", "start_date", "work_email", "hiring_type", "hiring_status", "completion_date", "contract_status", "voluntarily_left", "contract_coverage", "new_hiring_status", "client_legal_entity", "has_eor_termination", "contract_is_archived", "contract_has_contractor", "is_user_contract_deleted", "hris_direct_employee_invitation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['EmploymentDetailTeam', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> typing.Union['PeoplePayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ended"]) -> typing.Union[MetaOapg.properties.is_ended, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seniority"]) -> typing.Union[MetaOapg.properties.seniority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_email"]) -> typing.Union[MetaOapg.properties.work_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_type"]) -> typing.Union[MetaOapg.properties.hiring_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_status"]) -> typing.Union[MetaOapg.properties.hiring_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_date"]) -> typing.Union[MetaOapg.properties.completion_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_status"]) -> typing.Union[MetaOapg.properties.contract_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voluntarily_left"]) -> typing.Union[MetaOapg.properties.voluntarily_left, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_coverage"]) -> typing.Union['EmploymentDetailContractCoverage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_hiring_status"]) -> typing.Union[MetaOapg.properties.new_hiring_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_legal_entity"]) -> typing.Union['PeopleClientLegalEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_eor_termination"]) -> typing.Union[MetaOapg.properties.has_eor_termination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_is_archived"]) -> typing.Union[MetaOapg.properties.contract_is_archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_has_contractor"]) -> typing.Union[MetaOapg.properties.contract_has_contractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_user_contract_deleted"]) -> typing.Union[MetaOapg.properties.is_user_contract_deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hris_direct_employee_invitation"]) -> typing.Union[MetaOapg.properties.hris_direct_employee_invitation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "team", "email", "state", "country", "payment", "is_ended", "timezone", "job_title", "seniority", "start_date", "work_email", "hiring_type", "hiring_status", "completion_date", "contract_status", "voluntarily_left", "contract_coverage", "new_hiring_status", "client_legal_entity", "has_eor_termination", "contract_is_archived", "contract_has_contractor", "is_user_contract_deleted", "hris_direct_employee_invitation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        team: typing.Union['EmploymentDetailTeam', schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        payment: typing.Union['PeoplePayment', schemas.Unset] = schemas.unset,
        is_ended: typing.Union[MetaOapg.properties.is_ended, bool, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        seniority: typing.Union[MetaOapg.properties.seniority, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, schemas.Unset] = schemas.unset,
        work_email: typing.Union[MetaOapg.properties.work_email, str, schemas.Unset] = schemas.unset,
        hiring_type: typing.Union[MetaOapg.properties.hiring_type, str, schemas.Unset] = schemas.unset,
        hiring_status: typing.Union[MetaOapg.properties.hiring_status, str, schemas.Unset] = schemas.unset,
        completion_date: typing.Union[MetaOapg.properties.completion_date, str, schemas.Unset] = schemas.unset,
        contract_status: typing.Union[MetaOapg.properties.contract_status, str, schemas.Unset] = schemas.unset,
        voluntarily_left: typing.Union[MetaOapg.properties.voluntarily_left, str, schemas.Unset] = schemas.unset,
        contract_coverage: typing.Union['EmploymentDetailContractCoverage', schemas.Unset] = schemas.unset,
        new_hiring_status: typing.Union[MetaOapg.properties.new_hiring_status, str, schemas.Unset] = schemas.unset,
        client_legal_entity: typing.Union['PeopleClientLegalEntity', schemas.Unset] = schemas.unset,
        has_eor_termination: typing.Union[MetaOapg.properties.has_eor_termination, str, schemas.Unset] = schemas.unset,
        contract_is_archived: typing.Union[MetaOapg.properties.contract_is_archived, bool, schemas.Unset] = schemas.unset,
        contract_has_contractor: typing.Union[MetaOapg.properties.contract_has_contractor, bool, schemas.Unset] = schemas.unset,
        is_user_contract_deleted: typing.Union[MetaOapg.properties.is_user_contract_deleted, bool, schemas.Unset] = schemas.unset,
        hris_direct_employee_invitation: typing.Union[MetaOapg.properties.hris_direct_employee_invitation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmploymentDetail':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            team=team,
            email=email,
            state=state,
            country=country,
            payment=payment,
            is_ended=is_ended,
            timezone=timezone,
            job_title=job_title,
            seniority=seniority,
            start_date=start_date,
            work_email=work_email,
            hiring_type=hiring_type,
            hiring_status=hiring_status,
            completion_date=completion_date,
            contract_status=contract_status,
            voluntarily_left=voluntarily_left,
            contract_coverage=contract_coverage,
            new_hiring_status=new_hiring_status,
            client_legal_entity=client_legal_entity,
            has_eor_termination=has_eor_termination,
            contract_is_archived=contract_is_archived,
            contract_has_contractor=contract_has_contractor,
            is_user_contract_deleted=is_user_contract_deleted,
            hris_direct_employee_invitation=hris_direct_employee_invitation,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.employment_detail_contract_coverage import EmploymentDetailContractCoverage
from deel_python_sdk.model.employment_detail_team import EmploymentDetailTeam
from deel_python_sdk.model.people_client_legal_entity import PeopleClientLegalEntity
from deel_python_sdk.model.people_payment import PeoplePayment
