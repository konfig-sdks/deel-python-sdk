# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class CandidateToCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of candidate to create
    """


    class MetaOapg:
        required = {
            "link",
            "last_name",
            "id",
            "first_name",
            "start_date",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['CandidateStatusEnum']:
                return CandidateStatusEnum
        
            @staticmethod
            def start_date() -> typing.Type['DateStringRequired']:
                return DateStringRequired
            link = schemas.StrSchema
            job_title = schemas.StrSchema
        
            @staticmethod
            def email() -> typing.Type['EmailTypeRequired']:
                return EmailTypeRequired
        
            @staticmethod
            def nationality() -> typing.Type['NationalityType']:
                return NationalityType
        
            @staticmethod
            def country() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class state(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 1
            __annotations__ = {
                "id": id,
                "first_name": first_name,
                "last_name": last_name,
                "status": status,
                "start_date": start_date,
                "link": link,
                "job_title": job_title,
                "email": email,
                "nationality": nationality,
                "country": country,
                "state": state,
            }
    
    link: MetaOapg.properties.link
    last_name: MetaOapg.properties.last_name
    id: MetaOapg.properties.id
    first_name: MetaOapg.properties.first_name
    start_date: 'DateStringRequired'
    status: 'CandidateStatusEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CandidateStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'EmailTypeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> 'NationalityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "status", "start_date", "link", "job_title", "email", "nationality", "country", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'CandidateStatusEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['EmailTypeRequired', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union['NationalityType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "status", "start_date", "link", "job_title", "email", "nationality", "country", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        last_name: typing.Union[MetaOapg.properties.last_name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, str, ],
        start_date: 'DateStringRequired',
        status: 'CandidateStatusEnum',
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        email: typing.Union['EmailTypeRequired', schemas.Unset] = schemas.unset,
        nationality: typing.Union['NationalityType', schemas.Unset] = schemas.unset,
        country: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CandidateToCreate':
        return super().__new__(
            cls,
            *args,
            link=link,
            last_name=last_name,
            id=id,
            first_name=first_name,
            start_date=start_date,
            status=status,
            job_title=job_title,
            email=email,
            nationality=nationality,
            country=country,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.candidate_status_enum import CandidateStatusEnum
from deel_python_sdk.model.country_code import CountryCode
from deel_python_sdk.model.date_string_required import DateStringRequired
from deel_python_sdk.model.email_type_required import EmailTypeRequired
from deel_python_sdk.model.nationality_type import NationalityType
