# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Mandatory EOR field.
    """


    class MetaOapg:
        
        class properties:
            label = schemas.StrSchema
            property_name = schemas.StrSchema
            input_type = schemas.StrSchema
            is_optional = schemas.BoolSchema
        
            @staticmethod
            def options() -> typing.Type['EorFieldOptions']:
                return EorFieldOptions
            __annotations__ = {
                "label": label,
                "property_name": property_name,
                "input_type": input_type,
                "is_optional": is_optional,
                "options": options,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["property_name"]) -> MetaOapg.properties.property_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_type"]) -> MetaOapg.properties.input_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_optional"]) -> MetaOapg.properties.is_optional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'EorFieldOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "property_name", "input_type", "is_optional", "options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["property_name"]) -> typing.Union[MetaOapg.properties.property_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_type"]) -> typing.Union[MetaOapg.properties.input_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_optional"]) -> typing.Union[MetaOapg.properties.is_optional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['EorFieldOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "property_name", "input_type", "is_optional", "options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        property_name: typing.Union[MetaOapg.properties.property_name, str, schemas.Unset] = schemas.unset,
        input_type: typing.Union[MetaOapg.properties.input_type, str, schemas.Unset] = schemas.unset,
        is_optional: typing.Union[MetaOapg.properties.is_optional, bool, schemas.Unset] = schemas.unset,
        options: typing.Union['EorFieldOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorField':
        return super().__new__(
            cls,
            *args,
            label=label,
            property_name=property_name,
            input_type=input_type,
            is_optional=is_optional,
            options=options,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_field_options import EorFieldOptions
