# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class Country(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "code",
            "eor_support",
            "state_type",
            "name",
            "visa_support",
            "states",
        }
        
        class properties:
        
            @staticmethod
            def code() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            visa_support = schemas.BoolSchema
            eor_support = schemas.BoolSchema
            
            
            class state_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class states(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StateOfCountry']:
                        return StateOfCountry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StateOfCountry'], typing.List['StateOfCountry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'states':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StateOfCountry':
                    return super().__getitem__(i)
            __annotations__ = {
                "code": code,
                "name": name,
                "visa_support": visa_support,
                "eor_support": eor_support,
                "state_type": state_type,
                "states": states,
            }
    
    code: 'CountryCode'
    eor_support: MetaOapg.properties.eor_support
    state_type: MetaOapg.properties.state_type
    name: MetaOapg.properties.name
    visa_support: MetaOapg.properties.visa_support
    states: MetaOapg.properties.states
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visa_support"]) -> MetaOapg.properties.visa_support: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eor_support"]) -> MetaOapg.properties.eor_support: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_type"]) -> MetaOapg.properties.state_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["states"]) -> MetaOapg.properties.states: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "name", "visa_support", "eor_support", "state_type", "states", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> 'CountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visa_support"]) -> MetaOapg.properties.visa_support: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eor_support"]) -> MetaOapg.properties.eor_support: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_type"]) -> MetaOapg.properties.state_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["states"]) -> MetaOapg.properties.states: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "name", "visa_support", "eor_support", "state_type", "states", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: 'CountryCode',
        eor_support: typing.Union[MetaOapg.properties.eor_support, bool, ],
        state_type: typing.Union[MetaOapg.properties.state_type, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        visa_support: typing.Union[MetaOapg.properties.visa_support, bool, ],
        states: typing.Union[MetaOapg.properties.states, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Country':
        return super().__new__(
            cls,
            *args,
            code=code,
            eor_support=eor_support,
            state_type=state_type,
            name=name,
            visa_support=visa_support,
            states=states,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.country_code import CountryCode
from deel_python_sdk.model.state_of_country import StateOfCountry
