# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "emails",
            "meta",
            "schemas",
            "name",
            "userName",
        }
        
        class properties:
            
            
            class emails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Email']:
                        return Email
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Email'], typing.List['Email']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emails':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Email':
                    return super().__getitem__(i)
        
            @staticmethod
            def name() -> typing.Type['Name']:
                return Name
        
            @staticmethod
            def schemas() -> typing.Type['UserSchemas']:
                return UserSchemas
            userName = schemas.StrSchema
        
            @staticmethod
            def meta() -> typing.Type['UserMeta']:
                return UserMeta
            title = schemas.StrSchema
            active = schemas.BoolSchema
            userType = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def urnietfparamsscimschemasextensionenterprise2_0_user() -> typing.Type['EnterpriseUser']:
                return EnterpriseUser
        
            @staticmethod
            def urnietfparamsscimschemasextension2_0_user() -> typing.Type['UserExtension']:
                return UserExtension
            __annotations__ = {
                "emails": emails,
                "name": name,
                "schemas": schemas,
                "userName": userName,
                "meta": meta,
                "title": title,
                "active": active,
                "userType": userType,
                "id": id,
                "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": urnietfparamsscimschemasextensionenterprise2_0_user,
                "urn:ietf:params:scim:schemas:extension:2.0:User": urnietfparamsscimschemasextension2_0_user,
            }
    
    emails: MetaOapg.properties.emails
    meta: 'UserMeta'
    schemas: 'UserSchemas'
    name: 'Name'
    userName: MetaOapg.properties.userName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'Name': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemas"]) -> 'UserSchemas': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'UserMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userType"]) -> MetaOapg.properties.userType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"]) -> 'EnterpriseUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urn:ietf:params:scim:schemas:extension:2.0:User"]) -> 'UserExtension': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["emails", "name", "schemas", "userName", "meta", "title", "active", "userType", "id", "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User", "urn:ietf:params:scim:schemas:extension:2.0:User", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'Name': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemas"]) -> 'UserSchemas': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'UserMeta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userType"]) -> typing.Union[MetaOapg.properties.userType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"]) -> typing.Union['EnterpriseUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urn:ietf:params:scim:schemas:extension:2.0:User"]) -> typing.Union['UserExtension', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["emails", "name", "schemas", "userName", "meta", "title", "active", "userType", "id", "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User", "urn:ietf:params:scim:schemas:extension:2.0:User", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        emails: typing.Union[MetaOapg.properties.emails, list, tuple, ],
        meta: 'UserMeta',
        schemas: 'UserSchemas',
        name: 'Name',
        userName: typing.Union[MetaOapg.properties.userName, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        userType: typing.Union[MetaOapg.properties.userType, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            emails=emails,
            meta=meta,
            schemas=schemas,
            name=name,
            userName=userName,
            title=title,
            active=active,
            userType=userType,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.email import Email
from deel_python_sdk.model.enterprise_user import EnterpriseUser
from deel_python_sdk.model.name import Name
from deel_python_sdk.model.user_extension import UserExtension
from deel_python_sdk.model.user_meta import UserMeta
from deel_python_sdk.model.user_schemas import UserSchemas
