# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class CompensationDetailsOfContractToCreateShared(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "payment_due_days",
            "cycle_end",
            "cycle_end_type",
            "payment_due_type",
            "currency_code",
            "frequency",
        }
        
        class properties:
        
            @staticmethod
            def currency_code() -> typing.Type['CurrencyCodeRequired']:
                return CurrencyCodeRequired
        
            @staticmethod
            def frequency() -> typing.Type['WorkStatementCycleScaleEnum']:
                return WorkStatementCycleScaleEnum
            
            
            class cycle_end(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 31
                    inclusive_minimum = 1
        
            @staticmethod
            def cycle_end_type() -> typing.Type['WorkStatementCycleEndTypeEnum']:
                return WorkStatementCycleEndTypeEnum
        
            @staticmethod
            def payment_due_type() -> typing.Type['WorkStatementPaymentDueTypeEnum']:
                return WorkStatementPaymentDueTypeEnum
            
            
            class payment_due_days(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 90
                    inclusive_minimum = 0
            amount = schemas.NumberSchema
            pay_before_weekends = schemas.BoolSchema
        
            @staticmethod
            def first_payment_date() -> typing.Type['DateString']:
                return DateString
            
            
            class first_payment(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
        
            @staticmethod
            def notice_period() -> typing.Type['NoticePeriod']:
                return NoticePeriod
            __annotations__ = {
                "currency_code": currency_code,
                "frequency": frequency,
                "cycle_end": cycle_end,
                "cycle_end_type": cycle_end_type,
                "payment_due_type": payment_due_type,
                "payment_due_days": payment_due_days,
                "amount": amount,
                "pay_before_weekends": pay_before_weekends,
                "first_payment_date": first_payment_date,
                "first_payment": first_payment,
                "notice_period": notice_period,
            }
    
    payment_due_days: MetaOapg.properties.payment_due_days
    cycle_end: MetaOapg.properties.cycle_end
    cycle_end_type: 'WorkStatementCycleEndTypeEnum'
    payment_due_type: 'WorkStatementPaymentDueTypeEnum'
    currency_code: 'CurrencyCodeRequired'
    frequency: 'WorkStatementCycleScaleEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> 'WorkStatementCycleScaleEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_end"]) -> MetaOapg.properties.cycle_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_end_type"]) -> 'WorkStatementCycleEndTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_due_type"]) -> 'WorkStatementPaymentDueTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_due_days"]) -> MetaOapg.properties.payment_due_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_before_weekends"]) -> MetaOapg.properties.pay_before_weekends: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_payment_date"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_payment"]) -> MetaOapg.properties.first_payment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notice_period"]) -> 'NoticePeriod': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_code", "frequency", "cycle_end", "cycle_end_type", "payment_due_type", "payment_due_days", "amount", "pay_before_weekends", "first_payment_date", "first_payment", "notice_period", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> 'WorkStatementCycleScaleEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_end"]) -> MetaOapg.properties.cycle_end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_end_type"]) -> 'WorkStatementCycleEndTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_due_type"]) -> 'WorkStatementPaymentDueTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_due_days"]) -> MetaOapg.properties.payment_due_days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_before_weekends"]) -> typing.Union[MetaOapg.properties.pay_before_weekends, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_payment_date"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_payment"]) -> typing.Union[MetaOapg.properties.first_payment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notice_period"]) -> typing.Union['NoticePeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_code", "frequency", "cycle_end", "cycle_end_type", "payment_due_type", "payment_due_days", "amount", "pay_before_weekends", "first_payment_date", "first_payment", "notice_period", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payment_due_days: typing.Union[MetaOapg.properties.payment_due_days, decimal.Decimal, int, float, ],
        cycle_end: typing.Union[MetaOapg.properties.cycle_end, decimal.Decimal, int, float, ],
        cycle_end_type: 'WorkStatementCycleEndTypeEnum',
        payment_due_type: 'WorkStatementPaymentDueTypeEnum',
        currency_code: 'CurrencyCodeRequired',
        frequency: 'WorkStatementCycleScaleEnum',
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pay_before_weekends: typing.Union[MetaOapg.properties.pay_before_weekends, bool, schemas.Unset] = schemas.unset,
        first_payment_date: typing.Union['DateString', schemas.Unset] = schemas.unset,
        first_payment: typing.Union[MetaOapg.properties.first_payment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        notice_period: typing.Union['NoticePeriod', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompensationDetailsOfContractToCreateShared':
        return super().__new__(
            cls,
            *args,
            payment_due_days=payment_due_days,
            cycle_end=cycle_end,
            cycle_end_type=cycle_end_type,
            payment_due_type=payment_due_type,
            currency_code=currency_code,
            frequency=frequency,
            amount=amount,
            pay_before_weekends=pay_before_weekends,
            first_payment_date=first_payment_date,
            first_payment=first_payment,
            notice_period=notice_period,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.currency_code_required import CurrencyCodeRequired
from deel_python_sdk.model.date_string import DateString
from deel_python_sdk.model.notice_period import NoticePeriod
from deel_python_sdk.model.work_statement_cycle_end_type_enum import WorkStatementCycleEndTypeEnum
from deel_python_sdk.model.work_statement_cycle_scale_enum import WorkStatementCycleScaleEnum
from deel_python_sdk.model.work_statement_payment_due_type_enum import WorkStatementPaymentDueTypeEnum
