# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class PaymentBreakDown(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            date = schemas.StrSchema
            general_ledger_account = schemas.StrSchema
            team = schemas.StrSchema
            contractor_unique_identifier = schemas.StrSchema
            contractor_employee_name = schemas.StrSchema
            contractor_email = schemas.StrSchema
            invoice_number = schemas.StrSchema
            currency = schemas.StrSchema
            payment_currency = schemas.StrSchema
            receipt_number = schemas.StrSchema
            work = schemas.StrSchema
            bonus = schemas.StrSchema
            expenses = schemas.StrSchema
            commissions = schemas.StrSchema
            deductions = schemas.StrSchema
            overtime = schemas.StrSchema
            pro_rata = schemas.StrSchema
            others = schemas.StrSchema
            processing_fee = schemas.StrSchema
            adjustment = schemas.StrSchema
            total = schemas.StrSchema
            total_payment_currency = schemas.StrSchema
            payment_date = schemas.StrSchema
            frequency = schemas.StrSchema
            contract_country = schemas.StrSchema
            contract_start_date = schemas.StrSchema
            approvers = schemas.StrSchema
            approve_date = schemas.StrSchema
            __annotations__ = {
                "date": date,
                "general_ledger_account": general_ledger_account,
                "team": team,
                "contractor_unique_identifier": contractor_unique_identifier,
                "contractor_employee_name": contractor_employee_name,
                "contractor_email": contractor_email,
                "invoice_number": invoice_number,
                "currency": currency,
                "payment_currency": payment_currency,
                "receipt_number": receipt_number,
                "work": work,
                "bonus": bonus,
                "expenses": expenses,
                "commissions": commissions,
                "deductions": deductions,
                "overtime": overtime,
                "pro_rata": pro_rata,
                "others": others,
                "processing_fee": processing_fee,
                "adjustment": adjustment,
                "total": total,
                "total_payment_currency": total_payment_currency,
                "payment_date": payment_date,
                "frequency": frequency,
                "contract_country": contract_country,
                "contract_start_date": contract_start_date,
                "approvers": approvers,
                "approve_date": approve_date,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["general_ledger_account"]) -> MetaOapg.properties.general_ledger_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_unique_identifier"]) -> MetaOapg.properties.contractor_unique_identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_employee_name"]) -> MetaOapg.properties.contractor_employee_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_email"]) -> MetaOapg.properties.contractor_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_number"]) -> MetaOapg.properties.invoice_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_currency"]) -> MetaOapg.properties.payment_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_number"]) -> MetaOapg.properties.receipt_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work"]) -> MetaOapg.properties.work: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonus"]) -> MetaOapg.properties.bonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenses"]) -> MetaOapg.properties.expenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissions"]) -> MetaOapg.properties.commissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtime"]) -> MetaOapg.properties.overtime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pro_rata"]) -> MetaOapg.properties.pro_rata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["others"]) -> MetaOapg.properties.others: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processing_fee"]) -> MetaOapg.properties.processing_fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment"]) -> MetaOapg.properties.adjustment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_payment_currency"]) -> MetaOapg.properties.total_payment_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_date"]) -> MetaOapg.properties.payment_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_country"]) -> MetaOapg.properties.contract_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_start_date"]) -> MetaOapg.properties.contract_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvers"]) -> MetaOapg.properties.approvers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approve_date"]) -> MetaOapg.properties.approve_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "general_ledger_account", "team", "contractor_unique_identifier", "contractor_employee_name", "contractor_email", "invoice_number", "currency", "payment_currency", "receipt_number", "work", "bonus", "expenses", "commissions", "deductions", "overtime", "pro_rata", "others", "processing_fee", "adjustment", "total", "total_payment_currency", "payment_date", "frequency", "contract_country", "contract_start_date", "approvers", "approve_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["general_ledger_account"]) -> typing.Union[MetaOapg.properties.general_ledger_account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union[MetaOapg.properties.team, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_unique_identifier"]) -> typing.Union[MetaOapg.properties.contractor_unique_identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_employee_name"]) -> typing.Union[MetaOapg.properties.contractor_employee_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_email"]) -> typing.Union[MetaOapg.properties.contractor_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_number"]) -> typing.Union[MetaOapg.properties.invoice_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_currency"]) -> typing.Union[MetaOapg.properties.payment_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_number"]) -> typing.Union[MetaOapg.properties.receipt_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work"]) -> typing.Union[MetaOapg.properties.work, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonus"]) -> typing.Union[MetaOapg.properties.bonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenses"]) -> typing.Union[MetaOapg.properties.expenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissions"]) -> typing.Union[MetaOapg.properties.commissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtime"]) -> typing.Union[MetaOapg.properties.overtime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pro_rata"]) -> typing.Union[MetaOapg.properties.pro_rata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["others"]) -> typing.Union[MetaOapg.properties.others, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processing_fee"]) -> typing.Union[MetaOapg.properties.processing_fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment"]) -> typing.Union[MetaOapg.properties.adjustment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_payment_currency"]) -> typing.Union[MetaOapg.properties.total_payment_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_date"]) -> typing.Union[MetaOapg.properties.payment_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_country"]) -> typing.Union[MetaOapg.properties.contract_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_start_date"]) -> typing.Union[MetaOapg.properties.contract_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvers"]) -> typing.Union[MetaOapg.properties.approvers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approve_date"]) -> typing.Union[MetaOapg.properties.approve_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "general_ledger_account", "team", "contractor_unique_identifier", "contractor_employee_name", "contractor_email", "invoice_number", "currency", "payment_currency", "receipt_number", "work", "bonus", "expenses", "commissions", "deductions", "overtime", "pro_rata", "others", "processing_fee", "adjustment", "total", "total_payment_currency", "payment_date", "frequency", "contract_country", "contract_start_date", "approvers", "approve_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        general_ledger_account: typing.Union[MetaOapg.properties.general_ledger_account, str, schemas.Unset] = schemas.unset,
        team: typing.Union[MetaOapg.properties.team, str, schemas.Unset] = schemas.unset,
        contractor_unique_identifier: typing.Union[MetaOapg.properties.contractor_unique_identifier, str, schemas.Unset] = schemas.unset,
        contractor_employee_name: typing.Union[MetaOapg.properties.contractor_employee_name, str, schemas.Unset] = schemas.unset,
        contractor_email: typing.Union[MetaOapg.properties.contractor_email, str, schemas.Unset] = schemas.unset,
        invoice_number: typing.Union[MetaOapg.properties.invoice_number, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        payment_currency: typing.Union[MetaOapg.properties.payment_currency, str, schemas.Unset] = schemas.unset,
        receipt_number: typing.Union[MetaOapg.properties.receipt_number, str, schemas.Unset] = schemas.unset,
        work: typing.Union[MetaOapg.properties.work, str, schemas.Unset] = schemas.unset,
        bonus: typing.Union[MetaOapg.properties.bonus, str, schemas.Unset] = schemas.unset,
        expenses: typing.Union[MetaOapg.properties.expenses, str, schemas.Unset] = schemas.unset,
        commissions: typing.Union[MetaOapg.properties.commissions, str, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, str, schemas.Unset] = schemas.unset,
        overtime: typing.Union[MetaOapg.properties.overtime, str, schemas.Unset] = schemas.unset,
        pro_rata: typing.Union[MetaOapg.properties.pro_rata, str, schemas.Unset] = schemas.unset,
        others: typing.Union[MetaOapg.properties.others, str, schemas.Unset] = schemas.unset,
        processing_fee: typing.Union[MetaOapg.properties.processing_fee, str, schemas.Unset] = schemas.unset,
        adjustment: typing.Union[MetaOapg.properties.adjustment, str, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, str, schemas.Unset] = schemas.unset,
        total_payment_currency: typing.Union[MetaOapg.properties.total_payment_currency, str, schemas.Unset] = schemas.unset,
        payment_date: typing.Union[MetaOapg.properties.payment_date, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, str, schemas.Unset] = schemas.unset,
        contract_country: typing.Union[MetaOapg.properties.contract_country, str, schemas.Unset] = schemas.unset,
        contract_start_date: typing.Union[MetaOapg.properties.contract_start_date, str, schemas.Unset] = schemas.unset,
        approvers: typing.Union[MetaOapg.properties.approvers, str, schemas.Unset] = schemas.unset,
        approve_date: typing.Union[MetaOapg.properties.approve_date, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentBreakDown':
        return super().__new__(
            cls,
            *args,
            date=date,
            general_ledger_account=general_ledger_account,
            team=team,
            contractor_unique_identifier=contractor_unique_identifier,
            contractor_employee_name=contractor_employee_name,
            contractor_email=contractor_email,
            invoice_number=invoice_number,
            currency=currency,
            payment_currency=payment_currency,
            receipt_number=receipt_number,
            work=work,
            bonus=bonus,
            expenses=expenses,
            commissions=commissions,
            deductions=deductions,
            overtime=overtime,
            pro_rata=pro_rata,
            others=others,
            processing_fee=processing_fee,
            adjustment=adjustment,
            total=total,
            total_payment_currency=total_payment_currency,
            payment_date=payment_date,
            frequency=frequency,
            contract_country=contract_country,
            contract_start_date=contract_start_date,
            approvers=approvers,
            approve_date=approve_date,
            _configuration=_configuration,
            **kwargs,
        )
