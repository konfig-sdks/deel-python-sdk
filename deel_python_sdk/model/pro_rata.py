# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class ProRata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of the pro rata for the first payment
    """


    class MetaOapg:
        
        class properties:
            
            
            class calculation_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CUSTOM_AMOUNT": "CUSTOM_AMOUNT",
                        "WORK_DAYS": "WORK_DAYS",
                        "CALENDAR_DAYS": "CALENDAR_DAYS",
                        "FULL_AMOUNT": "FULL_AMOUNT",
                    }
                
                @schemas.classproperty
                def CUSTOM_AMOUNT(cls):
                    return cls("CUSTOM_AMOUNT")
                
                @schemas.classproperty
                def WORK_DAYS(cls):
                    return cls("WORK_DAYS")
                
                @schemas.classproperty
                def CALENDAR_DAYS(cls):
                    return cls("CALENDAR_DAYS")
                
                @schemas.classproperty
                def FULL_AMOUNT(cls):
                    return cls("FULL_AMOUNT")
            
            
            class rate(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class daily_rate(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class total(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class cycle_work_days(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
        
            @staticmethod
            def work_week_start() -> typing.Type['WeekDaysEnum']:
                return WeekDaysEnum
        
            @staticmethod
            def work_week_end() -> typing.Type['WeekDaysEnum']:
                return WeekDaysEnum
        
            @staticmethod
            def cycle_start() -> typing.Type['DateStringRequired']:
                return DateStringRequired
        
            @staticmethod
            def cycle_end() -> typing.Type['DateStringRequired']:
                return DateStringRequired
            __annotations__ = {
                "calculation_type": calculation_type,
                "rate": rate,
                "daily_rate": daily_rate,
                "total": total,
                "cycle_work_days": cycle_work_days,
                "work_week_start": work_week_start,
                "work_week_end": work_week_end,
                "cycle_start": cycle_start,
                "cycle_end": cycle_end,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation_type"]) -> MetaOapg.properties.calculation_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_rate"]) -> MetaOapg.properties.daily_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_work_days"]) -> MetaOapg.properties.cycle_work_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_week_start"]) -> 'WeekDaysEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_week_end"]) -> 'WeekDaysEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_start"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_end"]) -> 'DateStringRequired': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["calculation_type", "rate", "daily_rate", "total", "cycle_work_days", "work_week_start", "work_week_end", "cycle_start", "cycle_end", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation_type"]) -> typing.Union[MetaOapg.properties.calculation_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_rate"]) -> typing.Union[MetaOapg.properties.daily_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_work_days"]) -> typing.Union[MetaOapg.properties.cycle_work_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_week_start"]) -> typing.Union['WeekDaysEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_week_end"]) -> typing.Union['WeekDaysEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_start"]) -> typing.Union['DateStringRequired', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_end"]) -> typing.Union['DateStringRequired', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["calculation_type", "rate", "daily_rate", "total", "cycle_work_days", "work_week_start", "work_week_end", "cycle_start", "cycle_end", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        calculation_type: typing.Union[MetaOapg.properties.calculation_type, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        daily_rate: typing.Union[MetaOapg.properties.daily_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cycle_work_days: typing.Union[MetaOapg.properties.cycle_work_days, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        work_week_start: typing.Union['WeekDaysEnum', schemas.Unset] = schemas.unset,
        work_week_end: typing.Union['WeekDaysEnum', schemas.Unset] = schemas.unset,
        cycle_start: typing.Union['DateStringRequired', schemas.Unset] = schemas.unset,
        cycle_end: typing.Union['DateStringRequired', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProRata':
        return super().__new__(
            cls,
            *args,
            calculation_type=calculation_type,
            rate=rate,
            daily_rate=daily_rate,
            total=total,
            cycle_work_days=cycle_work_days,
            work_week_start=work_week_start,
            work_week_end=work_week_end,
            cycle_start=cycle_start,
            cycle_end=cycle_end,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_string_required import DateStringRequired
from deel_python_sdk.model.week_days_enum import WeekDaysEnum
