# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorTimeoffsBaseItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
            "requested_at",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['TimeoffsTypeEnum']:
                return TimeoffsTypeEnum
        
            @staticmethod
            def requested_at() -> typing.Type['DateTimeString']:
                return DateTimeString
        
            @staticmethod
            def status() -> typing.Type['TimeoffsStatusEnum']:
                return TimeoffsStatusEnum
            
            
            class reason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def reviewed_at() -> typing.Type['DateTimeStringNullable']:
                return DateTimeStringNullable
            
            
            class denial_reason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'denial_reason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class has_multiple_dates(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'has_multiple_dates':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class other_timeoff_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other_timeoff_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def requester() -> typing.Type['TimeoffsProfileNullable']:
                return TimeoffsProfileNullable
            
            
            class reviewer(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TimeoffsProfile,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'reviewer':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            days_used_start_year = schemas.StrSchema
            days_used_end_year = schemas.StrSchema
            total_days_used = schemas.StrSchema
            start_date_is_half_day = schemas.BoolSchema
            end_date_is_half_day = schemas.BoolSchema
            
            
            class single_date(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            DateTimeString,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'single_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class date_is_half_day(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'date_is_half_day':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def attachments() -> typing.Type['TimeoffsAttachmentsNullable']:
                return TimeoffsAttachmentsNullable
            __annotations__ = {
                "type": type,
                "requested_at": requested_at,
                "status": status,
                "reason": reason,
                "reviewed_at": reviewed_at,
                "denial_reason": denial_reason,
                "has_multiple_dates": has_multiple_dates,
                "other_timeoff_name": other_timeoff_name,
                "requester": requester,
                "reviewer": reviewer,
                "days_used_start_year": days_used_start_year,
                "days_used_end_year": days_used_end_year,
                "total_days_used": total_days_used,
                "start_date_is_half_day": start_date_is_half_day,
                "end_date_is_half_day": end_date_is_half_day,
                "single_date": single_date,
                "date_is_half_day": date_is_half_day,
                "attachments": attachments,
            }
    
    type: 'TimeoffsTypeEnum'
    requested_at: 'DateTimeString'
    status: 'TimeoffsStatusEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TimeoffsTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'TimeoffsStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_at"]) -> 'DateTimeStringNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denial_reason"]) -> MetaOapg.properties.denial_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_multiple_dates"]) -> MetaOapg.properties.has_multiple_dates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_timeoff_name"]) -> MetaOapg.properties.other_timeoff_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> 'TimeoffsProfileNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewer"]) -> MetaOapg.properties.reviewer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_start_year"]) -> MetaOapg.properties.days_used_start_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_end_year"]) -> MetaOapg.properties.days_used_end_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_days_used"]) -> MetaOapg.properties.total_days_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date_is_half_day"]) -> MetaOapg.properties.start_date_is_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date_is_half_day"]) -> MetaOapg.properties.end_date_is_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["single_date"]) -> MetaOapg.properties.single_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_is_half_day"]) -> MetaOapg.properties.date_is_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'TimeoffsAttachmentsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "requested_at", "status", "reason", "reviewed_at", "denial_reason", "has_multiple_dates", "other_timeoff_name", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "total_days_used", "start_date_is_half_day", "end_date_is_half_day", "single_date", "date_is_half_day", "attachments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'TimeoffsTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'TimeoffsStatusEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_at"]) -> typing.Union['DateTimeStringNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denial_reason"]) -> typing.Union[MetaOapg.properties.denial_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_multiple_dates"]) -> typing.Union[MetaOapg.properties.has_multiple_dates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_timeoff_name"]) -> typing.Union[MetaOapg.properties.other_timeoff_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> typing.Union['TimeoffsProfileNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewer"]) -> typing.Union[MetaOapg.properties.reviewer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_start_year"]) -> typing.Union[MetaOapg.properties.days_used_start_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_end_year"]) -> typing.Union[MetaOapg.properties.days_used_end_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_days_used"]) -> typing.Union[MetaOapg.properties.total_days_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date_is_half_day"]) -> typing.Union[MetaOapg.properties.start_date_is_half_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date_is_half_day"]) -> typing.Union[MetaOapg.properties.end_date_is_half_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["single_date"]) -> typing.Union[MetaOapg.properties.single_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_is_half_day"]) -> typing.Union[MetaOapg.properties.date_is_half_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['TimeoffsAttachmentsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "requested_at", "status", "reason", "reviewed_at", "denial_reason", "has_multiple_dates", "other_timeoff_name", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "total_days_used", "start_date_is_half_day", "end_date_is_half_day", "single_date", "date_is_half_day", "attachments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: 'TimeoffsTypeEnum',
        requested_at: 'DateTimeString',
        status: 'TimeoffsStatusEnum',
        reason: typing.Union[MetaOapg.properties.reason, None, str, schemas.Unset] = schemas.unset,
        reviewed_at: typing.Union['DateTimeStringNullable', schemas.Unset] = schemas.unset,
        denial_reason: typing.Union[MetaOapg.properties.denial_reason, None, str, schemas.Unset] = schemas.unset,
        has_multiple_dates: typing.Union[MetaOapg.properties.has_multiple_dates, None, bool, schemas.Unset] = schemas.unset,
        other_timeoff_name: typing.Union[MetaOapg.properties.other_timeoff_name, None, str, schemas.Unset] = schemas.unset,
        requester: typing.Union['TimeoffsProfileNullable', schemas.Unset] = schemas.unset,
        reviewer: typing.Union[MetaOapg.properties.reviewer, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        days_used_start_year: typing.Union[MetaOapg.properties.days_used_start_year, str, schemas.Unset] = schemas.unset,
        days_used_end_year: typing.Union[MetaOapg.properties.days_used_end_year, str, schemas.Unset] = schemas.unset,
        total_days_used: typing.Union[MetaOapg.properties.total_days_used, str, schemas.Unset] = schemas.unset,
        start_date_is_half_day: typing.Union[MetaOapg.properties.start_date_is_half_day, bool, schemas.Unset] = schemas.unset,
        end_date_is_half_day: typing.Union[MetaOapg.properties.end_date_is_half_day, bool, schemas.Unset] = schemas.unset,
        single_date: typing.Union[MetaOapg.properties.single_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        date_is_half_day: typing.Union[MetaOapg.properties.date_is_half_day, None, bool, schemas.Unset] = schemas.unset,
        attachments: typing.Union['TimeoffsAttachmentsNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorTimeoffsBaseItem':
        return super().__new__(
            cls,
            *args,
            type=type,
            requested_at=requested_at,
            status=status,
            reason=reason,
            reviewed_at=reviewed_at,
            denial_reason=denial_reason,
            has_multiple_dates=has_multiple_dates,
            other_timeoff_name=other_timeoff_name,
            requester=requester,
            reviewer=reviewer,
            days_used_start_year=days_used_start_year,
            days_used_end_year=days_used_end_year,
            total_days_used=total_days_used,
            start_date_is_half_day=start_date_is_half_day,
            end_date_is_half_day=end_date_is_half_day,
            single_date=single_date,
            date_is_half_day=date_is_half_day,
            attachments=attachments,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_time_string import DateTimeString
from deel_python_sdk.model.date_time_string_nullable import DateTimeStringNullable
from deel_python_sdk.model.timeoffs_attachments_nullable import TimeoffsAttachmentsNullable
from deel_python_sdk.model.timeoffs_profile import TimeoffsProfile
from deel_python_sdk.model.timeoffs_profile_nullable import TimeoffsProfileNullable
from deel_python_sdk.model.timeoffs_status_enum import TimeoffsStatusEnum
from deel_python_sdk.model.timeoffs_type_enum import TimeoffsTypeEnum
