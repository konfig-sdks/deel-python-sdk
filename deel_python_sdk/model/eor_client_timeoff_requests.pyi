# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorClientTimeoffRequests(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "requests",
        }
        
        class properties:
            
            
            class requests(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EorTimeoffsBaseItem']:
                        return EorTimeoffsBaseItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EorTimeoffsBaseItem'], typing.List['EorTimeoffsBaseItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requests':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EorTimeoffsBaseItem':
                    return super().__getitem__(i)
            year = schemas.NumberSchema
            days_requested = schemas.NumberSchema
            current_approved = schemas.NumberSchema
            yearly_limit = schemas.NumberSchema
            over_annual_limit = schemas.BoolSchema
            yearly_requests = schemas.NumberSchema
            __annotations__ = {
                "requests": requests,
                "year": year,
                "days_requested": days_requested,
                "current_approved": current_approved,
                "yearly_limit": yearly_limit,
                "over_annual_limit": over_annual_limit,
                "yearly_requests": yearly_requests,
            }
    
    requests: MetaOapg.properties.requests
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requests"]) -> MetaOapg.properties.requests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_requested"]) -> MetaOapg.properties.days_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_approved"]) -> MetaOapg.properties.current_approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_limit"]) -> MetaOapg.properties.yearly_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["over_annual_limit"]) -> MetaOapg.properties.over_annual_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_requests"]) -> MetaOapg.properties.yearly_requests: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requests", "year", "days_requested", "current_approved", "yearly_limit", "over_annual_limit", "yearly_requests", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requests"]) -> MetaOapg.properties.requests: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_requested"]) -> typing.Union[MetaOapg.properties.days_requested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_approved"]) -> typing.Union[MetaOapg.properties.current_approved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_limit"]) -> typing.Union[MetaOapg.properties.yearly_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["over_annual_limit"]) -> typing.Union[MetaOapg.properties.over_annual_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_requests"]) -> typing.Union[MetaOapg.properties.yearly_requests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requests", "year", "days_requested", "current_approved", "yearly_limit", "over_annual_limit", "yearly_requests", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        requests: typing.Union[MetaOapg.properties.requests, list, tuple, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        days_requested: typing.Union[MetaOapg.properties.days_requested, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        current_approved: typing.Union[MetaOapg.properties.current_approved, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yearly_limit: typing.Union[MetaOapg.properties.yearly_limit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        over_annual_limit: typing.Union[MetaOapg.properties.over_annual_limit, bool, schemas.Unset] = schemas.unset,
        yearly_requests: typing.Union[MetaOapg.properties.yearly_requests, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorClientTimeoffRequests':
        return super().__new__(
            cls,
            *args,
            requests=requests,
            year=year,
            days_requested=days_requested,
            current_approved=current_approved,
            yearly_limit=yearly_limit,
            over_annual_limit=over_annual_limit,
            yearly_requests=yearly_requests,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_timeoffs_base_item import EorTimeoffsBaseItem
