# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EORContractBenefitsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def provider() -> typing.Type['EORContractBenefitsItemProvider']:
                return EORContractBenefitsItemProvider
            
            
            class offer_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OFFERED(cls):
                    return cls("Offered")
                
                @schemas.classproperty
                def NOT_OFFERED(cls):
                    return cls("Not offered")
        
            @staticmethod
            def plan() -> typing.Type['EORContractBenefitsItemPlan']:
                return EORContractBenefitsItemPlan
        
            @staticmethod
            def enrollment_details() -> typing.Type['EORContractBenefitsItemEnrollmentDetails']:
                return EORContractBenefitsItemEnrollmentDetails
            __annotations__ = {
                "id": id,
                "name": name,
                "provider": provider,
                "offer_status": offer_status,
                "plan": plan,
                "enrollment_details": enrollment_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'EORContractBenefitsItemProvider': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offer_status"]) -> MetaOapg.properties.offer_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan"]) -> 'EORContractBenefitsItemPlan': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollment_details"]) -> 'EORContractBenefitsItemEnrollmentDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "provider", "offer_status", "plan", "enrollment_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union['EORContractBenefitsItemProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offer_status"]) -> typing.Union[MetaOapg.properties.offer_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union['EORContractBenefitsItemPlan', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollment_details"]) -> typing.Union['EORContractBenefitsItemEnrollmentDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "provider", "offer_status", "plan", "enrollment_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        provider: typing.Union['EORContractBenefitsItemProvider', schemas.Unset] = schemas.unset,
        offer_status: typing.Union[MetaOapg.properties.offer_status, str, schemas.Unset] = schemas.unset,
        plan: typing.Union['EORContractBenefitsItemPlan', schemas.Unset] = schemas.unset,
        enrollment_details: typing.Union['EORContractBenefitsItemEnrollmentDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EORContractBenefitsItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            provider=provider,
            offer_status=offer_status,
            plan=plan,
            enrollment_details=enrollment_details,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_contract_benefits_item_enrollment_details import EORContractBenefitsItemEnrollmentDetails
from deel_python_sdk.model.eor_contract_benefits_item_plan import EORContractBenefitsItemPlan
from deel_python_sdk.model.eor_contract_benefits_item_provider import EORContractBenefitsItemProvider
