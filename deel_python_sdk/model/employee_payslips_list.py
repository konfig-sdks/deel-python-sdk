# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmployeePayslipsList(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rejected_at",
            "created_at",
            "reject_reason",
            "schedule_publishing_date",
            "url",
            "filename",
            "updated_at",
            "uploaded_at",
            "from",
            "id",
            "to",
            "published_at",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            _from = schemas.DateTimeSchema
            to = schemas.DateTimeSchema
            filename = schemas.StrSchema
            status = schemas.StrSchema
            rejected_at = schemas.DateTimeSchema
            reject_reason = schemas.StrSchema
            uploaded_at = schemas.DateTimeSchema
            published_at = schemas.DateTimeSchema
            schedule_publishing_date = schemas.DateTimeSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "from": _from,
                "to": to,
                "filename": filename,
                "status": status,
                "rejected_at": rejected_at,
                "reject_reason": reject_reason,
                "uploaded_at": uploaded_at,
                "published_at": published_at,
                "schedule_publishing_date": schedule_publishing_date,
                "created_at": created_at,
                "updated_at": updated_at,
                "url": url,
            }
    
    rejected_at: MetaOapg.properties.rejected_at
    created_at: MetaOapg.properties.created_at
    reject_reason: MetaOapg.properties.reject_reason
    schedule_publishing_date: MetaOapg.properties.schedule_publishing_date
    url: MetaOapg.properties.url
    filename: MetaOapg.properties.filename
    updated_at: MetaOapg.properties.updated_at
    uploaded_at: MetaOapg.properties.uploaded_at
    id: MetaOapg.properties.id
    to: MetaOapg.properties.to
    published_at: MetaOapg.properties.published_at
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejected_at"]) -> MetaOapg.properties.rejected_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reject_reason"]) -> MetaOapg.properties.reject_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploaded_at"]) -> MetaOapg.properties.uploaded_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published_at"]) -> MetaOapg.properties.published_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule_publishing_date"]) -> MetaOapg.properties.schedule_publishing_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "from", "to", "filename", "status", "rejected_at", "reject_reason", "uploaded_at", "published_at", "schedule_publishing_date", "created_at", "updated_at", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejected_at"]) -> MetaOapg.properties.rejected_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reject_reason"]) -> MetaOapg.properties.reject_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploaded_at"]) -> MetaOapg.properties.uploaded_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published_at"]) -> MetaOapg.properties.published_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule_publishing_date"]) -> MetaOapg.properties.schedule_publishing_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "from", "to", "filename", "status", "rejected_at", "reject_reason", "uploaded_at", "published_at", "schedule_publishing_date", "created_at", "updated_at", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rejected_at: typing.Union[MetaOapg.properties.rejected_at, str, datetime, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        reject_reason: typing.Union[MetaOapg.properties.reject_reason, str, ],
        schedule_publishing_date: typing.Union[MetaOapg.properties.schedule_publishing_date, str, datetime, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        filename: typing.Union[MetaOapg.properties.filename, str, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        uploaded_at: typing.Union[MetaOapg.properties.uploaded_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        to: typing.Union[MetaOapg.properties.to, str, datetime, ],
        published_at: typing.Union[MetaOapg.properties.published_at, str, datetime, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePayslipsList':
        return super().__new__(
            cls,
            *args,
            rejected_at=rejected_at,
            created_at=created_at,
            reject_reason=reject_reason,
            schedule_publishing_date=schedule_publishing_date,
            url=url,
            filename=filename,
            updated_at=updated_at,
            uploaded_at=uploaded_at,
            id=id,
            to=to,
            published_at=published_at,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
