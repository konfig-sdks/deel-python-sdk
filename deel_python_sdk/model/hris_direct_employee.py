# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class HrisDirectEmployee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "job_information",
            "team_information",
            "contract",
            "employee_details",
            "compensation",
        }
        
        class properties:
        
            @staticmethod
            def employee_details() -> typing.Type['HrisDirectEmployeeDetails']:
                return HrisDirectEmployeeDetails
        
            @staticmethod
            def team_information() -> typing.Type['HrisTeamInformation']:
                return HrisTeamInformation
            
            
            class job_information(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            HrisJobInformationTitleId,
                            HrisJobInformationTitleName,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'job_information':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def compensation() -> typing.Type['HrisCompensation']:
                return HrisCompensation
            
            
            class contract(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            HrisContractBase,
                            HrisContractBase,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contract':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def vacation_info() -> typing.Type['HrisDirectEmployeeVacationInfo']:
                return HrisDirectEmployeeVacationInfo
            __annotations__ = {
                "employee_details": employee_details,
                "team_information": team_information,
                "job_information": job_information,
                "compensation": compensation,
                "contract": contract,
                "vacation_info": vacation_info,
            }
    
    job_information: MetaOapg.properties.job_information
    team_information: 'HrisTeamInformation'
    contract: MetaOapg.properties.contract
    employee_details: 'HrisDirectEmployeeDetails'
    compensation: 'HrisCompensation'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_details"]) -> 'HrisDirectEmployeeDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_information"]) -> 'HrisTeamInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_information"]) -> MetaOapg.properties.job_information: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensation"]) -> 'HrisCompensation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract"]) -> MetaOapg.properties.contract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_info"]) -> 'HrisDirectEmployeeVacationInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_details", "team_information", "job_information", "compensation", "contract", "vacation_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_details"]) -> 'HrisDirectEmployeeDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_information"]) -> 'HrisTeamInformation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_information"]) -> MetaOapg.properties.job_information: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensation"]) -> 'HrisCompensation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract"]) -> MetaOapg.properties.contract: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_info"]) -> typing.Union['HrisDirectEmployeeVacationInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_details", "team_information", "job_information", "compensation", "contract", "vacation_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        job_information: typing.Union[MetaOapg.properties.job_information, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        team_information: 'HrisTeamInformation',
        contract: typing.Union[MetaOapg.properties.contract, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        employee_details: 'HrisDirectEmployeeDetails',
        compensation: 'HrisCompensation',
        vacation_info: typing.Union['HrisDirectEmployeeVacationInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HrisDirectEmployee':
        return super().__new__(
            cls,
            *args,
            job_information=job_information,
            team_information=team_information,
            contract=contract,
            employee_details=employee_details,
            compensation=compensation,
            vacation_info=vacation_info,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.hris_compensation import HrisCompensation
from deel_python_sdk.model.hris_contract_base import HrisContractBase
from deel_python_sdk.model.hris_direct_employee_details import HrisDirectEmployeeDetails
from deel_python_sdk.model.hris_direct_employee_vacation_info import HrisDirectEmployeeVacationInfo
from deel_python_sdk.model.hris_job_information_title_id import HrisJobInformationTitleId
from deel_python_sdk.model.hris_job_information_title_name import HrisJobInformationTitleName
from deel_python_sdk.model.hris_team_information import HrisTeamInformation
