# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class Address(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            streetAddress = schemas.StrSchema
            locality = schemas.StrSchema
            region = schemas.StrSchema
            postalCode = schemas.StrSchema
        
            @staticmethod
            def country() -> typing.Type['CountryCode']:
                return CountryCode
            __annotations__ = {
                "streetAddress": streetAddress,
                "locality": locality,
                "region": region,
                "postalCode": postalCode,
                "country": country,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddress"]) -> MetaOapg.properties.streetAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locality"]) -> MetaOapg.properties.locality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["streetAddress", "locality", "region", "postalCode", "country", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddress"]) -> typing.Union[MetaOapg.properties.streetAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locality"]) -> typing.Union[MetaOapg.properties.locality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["streetAddress", "locality", "region", "postalCode", "country", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        streetAddress: typing.Union[MetaOapg.properties.streetAddress, str, schemas.Unset] = schemas.unset,
        locality: typing.Union[MetaOapg.properties.locality, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        country: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Address':
        return super().__new__(
            cls,
            *args,
            streetAddress=streetAddress,
            locality=locality,
            region=region,
            postalCode=postalCode,
            country=country,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.country_code import CountryCode
