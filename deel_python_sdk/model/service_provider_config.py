# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class ServiceProviderConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def authenticationSchemes() -> typing.Type['AuthenticationSchemes']:
                return AuthenticationSchemes
        
            @staticmethod
            def bulk() -> typing.Type['BulkSupported']:
                return BulkSupported
        
            @staticmethod
            def changePassword() -> typing.Type['Supported']:
                return Supported
        
            @staticmethod
            def etag() -> typing.Type['Supported']:
                return Supported
        
            @staticmethod
            def filter() -> typing.Type['FilterSupported']:
                return FilterSupported
        
            @staticmethod
            def patch() -> typing.Type['Supported']:
                return Supported
        
            @staticmethod
            def schemas() -> typing.Type['ServiceProviderConfigSchemas']:
                return ServiceProviderConfigSchemas
        
            @staticmethod
            def sort() -> typing.Type['Supported']:
                return Supported
        
            @staticmethod
            def xmlDataFormat() -> typing.Type['Supported']:
                return Supported
            __annotations__ = {
                "authenticationSchemes": authenticationSchemes,
                "bulk": bulk,
                "changePassword": changePassword,
                "etag": etag,
                "filter": filter,
                "patch": patch,
                "schemas": schemas,
                "sort": sort,
                "xmlDataFormat": xmlDataFormat,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationSchemes"]) -> 'AuthenticationSchemes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bulk"]) -> 'BulkSupported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changePassword"]) -> 'Supported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["etag"]) -> 'Supported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'FilterSupported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["patch"]) -> 'Supported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemas"]) -> 'ServiceProviderConfigSchemas': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> 'Supported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xmlDataFormat"]) -> 'Supported': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authenticationSchemes", "bulk", "changePassword", "etag", "filter", "patch", "schemas", "sort", "xmlDataFormat", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationSchemes"]) -> typing.Union['AuthenticationSchemes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bulk"]) -> typing.Union['BulkSupported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changePassword"]) -> typing.Union['Supported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["etag"]) -> typing.Union['Supported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union['FilterSupported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["patch"]) -> typing.Union['Supported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemas"]) -> typing.Union['ServiceProviderConfigSchemas', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> typing.Union['Supported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xmlDataFormat"]) -> typing.Union['Supported', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authenticationSchemes", "bulk", "changePassword", "etag", "filter", "patch", "schemas", "sort", "xmlDataFormat", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        authenticationSchemes: typing.Union['AuthenticationSchemes', schemas.Unset] = schemas.unset,
        bulk: typing.Union['BulkSupported', schemas.Unset] = schemas.unset,
        changePassword: typing.Union['Supported', schemas.Unset] = schemas.unset,
        etag: typing.Union['Supported', schemas.Unset] = schemas.unset,
        filter: typing.Union['FilterSupported', schemas.Unset] = schemas.unset,
        patch: typing.Union['Supported', schemas.Unset] = schemas.unset,
        schemas: typing.Union['ServiceProviderConfigSchemas', schemas.Unset] = schemas.unset,
        sort: typing.Union['Supported', schemas.Unset] = schemas.unset,
        xmlDataFormat: typing.Union['Supported', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceProviderConfig':
        return super().__new__(
            cls,
            *args,
            authenticationSchemes=authenticationSchemes,
            bulk=bulk,
            changePassword=changePassword,
            etag=etag,
            filter=filter,
            patch=patch,
            schemas=schemas,
            sort=sort,
            xmlDataFormat=xmlDataFormat,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.authentication_schemes import AuthenticationSchemes
from deel_python_sdk.model.bulk_supported import BulkSupported
from deel_python_sdk.model.filter_supported import FilterSupported
from deel_python_sdk.model.service_provider_config_schemas import ServiceProviderConfigSchemas
from deel_python_sdk.model.supported import Supported
