# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorEmployeeCostCalculationRequestBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "currency",
            "salary",
        }
        
        class properties:
            
            
            class salary(
                schemas.NumberSchema
            ):
                pass
            country = schemas.StrSchema
            currency = schemas.StrSchema
        
            @staticmethod
            def benefits() -> typing.Type['EorEmployeeCostCalculationRequestBodyBenefits']:
                return EorEmployeeCostCalculationRequestBodyBenefits
            __annotations__ = {
                "salary": salary,
                "country": country,
                "currency": currency,
                "benefits": benefits,
            }
    
    country: MetaOapg.properties.country
    currency: MetaOapg.properties.currency
    salary: MetaOapg.properties.salary
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefits"]) -> 'EorEmployeeCostCalculationRequestBodyBenefits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["salary", "country", "currency", "benefits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefits"]) -> typing.Union['EorEmployeeCostCalculationRequestBodyBenefits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["salary", "country", "currency", "benefits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        salary: typing.Union[MetaOapg.properties.salary, decimal.Decimal, int, float, ],
        benefits: typing.Union['EorEmployeeCostCalculationRequestBodyBenefits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorEmployeeCostCalculationRequestBody':
        return super().__new__(
            cls,
            *args,
            country=country,
            currency=currency,
            salary=salary,
            benefits=benefits,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_employee_cost_calculation_request_body_benefits import EorEmployeeCostCalculationRequestBodyBenefits
