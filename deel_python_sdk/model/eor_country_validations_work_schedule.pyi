# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EorCountryValidationsWorkSchedule(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Employee's Work schedule in days and hours.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def days() -> typing.Type['EorCountryValidationsWorkScheduleDays']:
                return EorCountryValidationsWorkScheduleDays
        
            @staticmethod
            def hours() -> typing.Type['EorCountryValidationsWorkScheduleHours']:
                return EorCountryValidationsWorkScheduleHours
            __annotations__ = {
                "days": days,
                "hours": hours,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days"]) -> 'EorCountryValidationsWorkScheduleDays': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> 'EorCountryValidationsWorkScheduleHours': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["days", "hours", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days"]) -> typing.Union['EorCountryValidationsWorkScheduleDays', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union['EorCountryValidationsWorkScheduleHours', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["days", "hours", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        days: typing.Union['EorCountryValidationsWorkScheduleDays', schemas.Unset] = schemas.unset,
        hours: typing.Union['EorCountryValidationsWorkScheduleHours', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EorCountryValidationsWorkSchedule':
        return super().__new__(
            cls,
            *args,
            days=days,
            hours=hours,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.eor_country_validations_work_schedule_days import EorCountryValidationsWorkScheduleDays
from deel_python_sdk.model.eor_country_validations_work_schedule_hours import EorCountryValidationsWorkScheduleHours
