# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class PayrollAdjustment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            id = schemas.StrSchema
            contract_id = schemas.StrSchema
            amount = schemas.StrSchema
            date_of_adjustment = schemas.DateSchema
            
            
            class cycle_reference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cycle_reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['AdjustmentStatusEnum']:
                return AdjustmentStatusEnum
            adjustment_category_id = schemas.StrSchema
            actual_start_cycle_date = schemas.StrSchema
            actual_end_cycle_date = schemas.StrSchema
            move_next_cycle = schemas.BoolSchema
        
            @staticmethod
            def file() -> typing.Type['PayrollAdjustmentFile']:
                return PayrollAdjustmentFile
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "id": id,
                "contract_id": contract_id,
                "amount": amount,
                "date_of_adjustment": date_of_adjustment,
                "cycle_reference": cycle_reference,
                "status": status,
                "adjustment_category_id": adjustment_category_id,
                "actual_start_cycle_date": actual_start_cycle_date,
                "actual_end_cycle_date": actual_end_cycle_date,
                "move_next_cycle": move_next_cycle,
                "file": file,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_adjustment"]) -> MetaOapg.properties.date_of_adjustment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_reference"]) -> MetaOapg.properties.cycle_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'AdjustmentStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment_category_id"]) -> MetaOapg.properties.adjustment_category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actual_start_cycle_date"]) -> MetaOapg.properties.actual_start_cycle_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actual_end_cycle_date"]) -> MetaOapg.properties.actual_end_cycle_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["move_next_cycle"]) -> MetaOapg.properties.move_next_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'PayrollAdjustmentFile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "contract_id", "amount", "date_of_adjustment", "cycle_reference", "status", "adjustment_category_id", "actual_start_cycle_date", "actual_end_cycle_date", "move_next_cycle", "file", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> typing.Union[MetaOapg.properties.contract_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_adjustment"]) -> typing.Union[MetaOapg.properties.date_of_adjustment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_reference"]) -> typing.Union[MetaOapg.properties.cycle_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['AdjustmentStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment_category_id"]) -> typing.Union[MetaOapg.properties.adjustment_category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actual_start_cycle_date"]) -> typing.Union[MetaOapg.properties.actual_start_cycle_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actual_end_cycle_date"]) -> typing.Union[MetaOapg.properties.actual_end_cycle_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["move_next_cycle"]) -> typing.Union[MetaOapg.properties.move_next_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union['PayrollAdjustmentFile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "contract_id", "amount", "date_of_adjustment", "cycle_reference", "status", "adjustment_category_id", "actual_start_cycle_date", "actual_end_cycle_date", "move_next_cycle", "file", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        date_of_adjustment: typing.Union[MetaOapg.properties.date_of_adjustment, str, date, schemas.Unset] = schemas.unset,
        cycle_reference: typing.Union[MetaOapg.properties.cycle_reference, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union['AdjustmentStatusEnum', schemas.Unset] = schemas.unset,
        adjustment_category_id: typing.Union[MetaOapg.properties.adjustment_category_id, str, schemas.Unset] = schemas.unset,
        actual_start_cycle_date: typing.Union[MetaOapg.properties.actual_start_cycle_date, str, schemas.Unset] = schemas.unset,
        actual_end_cycle_date: typing.Union[MetaOapg.properties.actual_end_cycle_date, str, schemas.Unset] = schemas.unset,
        move_next_cycle: typing.Union[MetaOapg.properties.move_next_cycle, bool, schemas.Unset] = schemas.unset,
        file: typing.Union['PayrollAdjustmentFile', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollAdjustment':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            id=id,
            contract_id=contract_id,
            amount=amount,
            date_of_adjustment=date_of_adjustment,
            cycle_reference=cycle_reference,
            status=status,
            adjustment_category_id=adjustment_category_id,
            actual_start_cycle_date=actual_start_cycle_date,
            actual_end_cycle_date=actual_end_cycle_date,
            move_next_cycle=move_next_cycle,
            file=file,
            created_at=created_at,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.adjustment_status_enum import AdjustmentStatusEnum
from deel_python_sdk.model.payroll_adjustment_file import PayrollAdjustmentFile
