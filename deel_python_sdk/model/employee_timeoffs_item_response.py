# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class EmployeeTimeoffsItemResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            time_off_id = schemas.StrSchema
            time_off_type_id = schemas.StrSchema
            policy_id = schemas.StrSchema
            policy_name = schemas.StrSchema
            policy_type_name = schemas.StrSchema
            reason = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VACATION": "VACATION",
                        "SICK_LEAVE": "SICK_LEAVE",
                        "OTHER": "OTHER",
                    }
                
                @schemas.classproperty
                def VACATION(cls):
                    return cls("VACATION")
                
                @schemas.classproperty
                def SICK_LEAVE(cls):
                    return cls("SICK_LEAVE")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("OTHER")
            requested_at = schemas.StrSchema
            reviewed_at = schemas.StrSchema
            with_multiple_dates = schemas.BoolSchema
            single_date = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            denial_reason = schemas.BoolSchema
        
            @staticmethod
            def requester() -> typing.Type['RequesterTimeOff']:
                return RequesterTimeOff
            days_used_start_year = schemas.StrSchema
            days_used_end_year = schemas.StrSchema
            days_used = schemas.StrSchema
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            is_start_date_half_day = schemas.BoolSchema
            is_end_date_half_day = schemas.BoolSchema
        
            @staticmethod
            def attachments() -> typing.Type['EmployeeTimeoffsItemResponseAttachments']:
                return EmployeeTimeoffsItemResponseAttachments
            change_request = schemas.StrSchema
            is_updated = schemas.BoolSchema
        
            @staticmethod
            def applied_changes() -> typing.Type['EmployeeTimeoffsItemResponseAppliedChanges']:
                return EmployeeTimeoffsItemResponseAppliedChanges
            can_request_changes = schemas.BoolSchema
            __annotations__ = {
                "time_off_id": time_off_id,
                "time_off_type_id": time_off_type_id,
                "policy_id": policy_id,
                "policy_name": policy_name,
                "policy_type_name": policy_type_name,
                "reason": reason,
                "type": type,
                "requested_at": requested_at,
                "reviewed_at": reviewed_at,
                "with_multiple_dates": with_multiple_dates,
                "single_date": single_date,
                "created_at": created_at,
                "updated_at": updated_at,
                "denial_reason": denial_reason,
                "requester": requester,
                "days_used_start_year": days_used_start_year,
                "days_used_end_year": days_used_end_year,
                "days_used": days_used,
                "start_date": start_date,
                "end_date": end_date,
                "is_start_date_half_day": is_start_date_half_day,
                "is_end_date_half_day": is_end_date_half_day,
                "attachments": attachments,
                "change_request": change_request,
                "is_updated": is_updated,
                "applied_changes": applied_changes,
                "can_request_changes": can_request_changes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_id"]) -> MetaOapg.properties.time_off_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_type_id"]) -> MetaOapg.properties.time_off_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_id"]) -> MetaOapg.properties.policy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_type_name"]) -> MetaOapg.properties.policy_type_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_at"]) -> MetaOapg.properties.requested_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_at"]) -> MetaOapg.properties.reviewed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["with_multiple_dates"]) -> MetaOapg.properties.with_multiple_dates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["single_date"]) -> MetaOapg.properties.single_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denial_reason"]) -> MetaOapg.properties.denial_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> 'RequesterTimeOff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_start_year"]) -> MetaOapg.properties.days_used_start_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used_end_year"]) -> MetaOapg.properties.days_used_end_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_used"]) -> MetaOapg.properties.days_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_start_date_half_day"]) -> MetaOapg.properties.is_start_date_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_end_date_half_day"]) -> MetaOapg.properties.is_end_date_half_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'EmployeeTimeoffsItemResponseAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["change_request"]) -> MetaOapg.properties.change_request: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_updated"]) -> MetaOapg.properties.is_updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applied_changes"]) -> 'EmployeeTimeoffsItemResponseAppliedChanges': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_request_changes"]) -> MetaOapg.properties.can_request_changes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["time_off_id", "time_off_type_id", "policy_id", "policy_name", "policy_type_name", "reason", "type", "requested_at", "reviewed_at", "with_multiple_dates", "single_date", "created_at", "updated_at", "denial_reason", "requester", "days_used_start_year", "days_used_end_year", "days_used", "start_date", "end_date", "is_start_date_half_day", "is_end_date_half_day", "attachments", "change_request", "is_updated", "applied_changes", "can_request_changes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_id"]) -> typing.Union[MetaOapg.properties.time_off_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_type_id"]) -> typing.Union[MetaOapg.properties.time_off_type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_id"]) -> typing.Union[MetaOapg.properties.policy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> typing.Union[MetaOapg.properties.policy_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_type_name"]) -> typing.Union[MetaOapg.properties.policy_type_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_at"]) -> typing.Union[MetaOapg.properties.requested_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_at"]) -> typing.Union[MetaOapg.properties.reviewed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["with_multiple_dates"]) -> typing.Union[MetaOapg.properties.with_multiple_dates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["single_date"]) -> typing.Union[MetaOapg.properties.single_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denial_reason"]) -> typing.Union[MetaOapg.properties.denial_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> typing.Union['RequesterTimeOff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_start_year"]) -> typing.Union[MetaOapg.properties.days_used_start_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used_end_year"]) -> typing.Union[MetaOapg.properties.days_used_end_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_used"]) -> typing.Union[MetaOapg.properties.days_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_start_date_half_day"]) -> typing.Union[MetaOapg.properties.is_start_date_half_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_end_date_half_day"]) -> typing.Union[MetaOapg.properties.is_end_date_half_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['EmployeeTimeoffsItemResponseAttachments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["change_request"]) -> typing.Union[MetaOapg.properties.change_request, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_updated"]) -> typing.Union[MetaOapg.properties.is_updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applied_changes"]) -> typing.Union['EmployeeTimeoffsItemResponseAppliedChanges', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_request_changes"]) -> typing.Union[MetaOapg.properties.can_request_changes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time_off_id", "time_off_type_id", "policy_id", "policy_name", "policy_type_name", "reason", "type", "requested_at", "reviewed_at", "with_multiple_dates", "single_date", "created_at", "updated_at", "denial_reason", "requester", "days_used_start_year", "days_used_end_year", "days_used", "start_date", "end_date", "is_start_date_half_day", "is_end_date_half_day", "attachments", "change_request", "is_updated", "applied_changes", "can_request_changes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        time_off_id: typing.Union[MetaOapg.properties.time_off_id, str, schemas.Unset] = schemas.unset,
        time_off_type_id: typing.Union[MetaOapg.properties.time_off_type_id, str, schemas.Unset] = schemas.unset,
        policy_id: typing.Union[MetaOapg.properties.policy_id, str, schemas.Unset] = schemas.unset,
        policy_name: typing.Union[MetaOapg.properties.policy_name, str, schemas.Unset] = schemas.unset,
        policy_type_name: typing.Union[MetaOapg.properties.policy_type_name, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        requested_at: typing.Union[MetaOapg.properties.requested_at, str, schemas.Unset] = schemas.unset,
        reviewed_at: typing.Union[MetaOapg.properties.reviewed_at, str, schemas.Unset] = schemas.unset,
        with_multiple_dates: typing.Union[MetaOapg.properties.with_multiple_dates, bool, schemas.Unset] = schemas.unset,
        single_date: typing.Union[MetaOapg.properties.single_date, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        denial_reason: typing.Union[MetaOapg.properties.denial_reason, bool, schemas.Unset] = schemas.unset,
        requester: typing.Union['RequesterTimeOff', schemas.Unset] = schemas.unset,
        days_used_start_year: typing.Union[MetaOapg.properties.days_used_start_year, str, schemas.Unset] = schemas.unset,
        days_used_end_year: typing.Union[MetaOapg.properties.days_used_end_year, str, schemas.Unset] = schemas.unset,
        days_used: typing.Union[MetaOapg.properties.days_used, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        is_start_date_half_day: typing.Union[MetaOapg.properties.is_start_date_half_day, bool, schemas.Unset] = schemas.unset,
        is_end_date_half_day: typing.Union[MetaOapg.properties.is_end_date_half_day, bool, schemas.Unset] = schemas.unset,
        attachments: typing.Union['EmployeeTimeoffsItemResponseAttachments', schemas.Unset] = schemas.unset,
        change_request: typing.Union[MetaOapg.properties.change_request, str, schemas.Unset] = schemas.unset,
        is_updated: typing.Union[MetaOapg.properties.is_updated, bool, schemas.Unset] = schemas.unset,
        applied_changes: typing.Union['EmployeeTimeoffsItemResponseAppliedChanges', schemas.Unset] = schemas.unset,
        can_request_changes: typing.Union[MetaOapg.properties.can_request_changes, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeTimeoffsItemResponse':
        return super().__new__(
            cls,
            *args,
            time_off_id=time_off_id,
            time_off_type_id=time_off_type_id,
            policy_id=policy_id,
            policy_name=policy_name,
            policy_type_name=policy_type_name,
            reason=reason,
            type=type,
            requested_at=requested_at,
            reviewed_at=reviewed_at,
            with_multiple_dates=with_multiple_dates,
            single_date=single_date,
            created_at=created_at,
            updated_at=updated_at,
            denial_reason=denial_reason,
            requester=requester,
            days_used_start_year=days_used_start_year,
            days_used_end_year=days_used_end_year,
            days_used=days_used,
            start_date=start_date,
            end_date=end_date,
            is_start_date_half_day=is_start_date_half_day,
            is_end_date_half_day=is_end_date_half_day,
            attachments=attachments,
            change_request=change_request,
            is_updated=is_updated,
            applied_changes=applied_changes,
            can_request_changes=can_request_changes,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.employee_timeoffs_item_response_applied_changes import EmployeeTimeoffsItemResponseAppliedChanges
from deel_python_sdk.model.employee_timeoffs_item_response_attachments import EmployeeTimeoffsItemResponseAttachments
from deel_python_sdk.model.requester_time_off import RequesterTimeOff
