# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class TimeoffReview(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "is_approved",
        }
        
        class properties:
            is_approved = schemas.BoolSchema
            denial_reason = schemas.StrSchema
            __annotations__ = {
                "is_approved": is_approved,
                "denial_reason": denial_reason,
            }
    
    is_approved: MetaOapg.properties.is_approved
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_approved"]) -> MetaOapg.properties.is_approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denial_reason"]) -> MetaOapg.properties.denial_reason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_approved", "denial_reason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_approved"]) -> MetaOapg.properties.is_approved: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denial_reason"]) -> typing.Union[MetaOapg.properties.denial_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_approved", "denial_reason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_approved: typing.Union[MetaOapg.properties.is_approved, bool, ],
        denial_reason: typing.Union[MetaOapg.properties.denial_reason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeoffReview':
        return super().__new__(
            cls,
            *args,
            is_approved=is_approved,
            denial_reason=denial_reason,
            _configuration=_configuration,
            **kwargs,
        )
