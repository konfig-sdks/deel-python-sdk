# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class AdjustmentToCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of adjustment to create
    """


    class MetaOapg:
        required = {
            "adjustment_category_id",
            "country",
            "amount",
            "file",
            "contract_id",
            "vendor",
            "description",
            "title",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 3
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 3
            
            
            class contract_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 5
            
            
            class amount(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    min_length = 1
                    inclusive_minimum = 1
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NumberSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class file(
                schemas.BinarySchema
            ):
            
            
                class MetaOapg:
                    format = 'binary'
                    min_length = 1
            
            
            class adjustment_category_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 25
            
            
            class vendor(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 3
        
            @staticmethod
            def country() -> typing.Type['CountryCode']:
                return CountryCode
        
            @staticmethod
            def date_of_adjustment() -> typing.Type['DateString']:
                return DateString
            cycle_reference = schemas.StrSchema
            
            
            class move_next_cycle(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'move_next_cycle':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "title": title,
                "description": description,
                "contract_id": contract_id,
                "amount": amount,
                "file": file,
                "adjustment_category_id": adjustment_category_id,
                "vendor": vendor,
                "country": country,
                "date_of_adjustment": date_of_adjustment,
                "cycle_reference": cycle_reference,
                "move_next_cycle": move_next_cycle,
            }
    
    adjustment_category_id: MetaOapg.properties.adjustment_category_id
    country: 'CountryCode'
    amount: MetaOapg.properties.amount
    file: MetaOapg.properties.file
    contract_id: MetaOapg.properties.contract_id
    vendor: MetaOapg.properties.vendor
    description: MetaOapg.properties.description
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment_category_id"]) -> MetaOapg.properties.adjustment_category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_adjustment"]) -> 'DateString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycle_reference"]) -> MetaOapg.properties.cycle_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["move_next_cycle"]) -> MetaOapg.properties.move_next_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "contract_id", "amount", "file", "adjustment_category_id", "vendor", "country", "date_of_adjustment", "cycle_reference", "move_next_cycle", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment_category_id"]) -> MetaOapg.properties.adjustment_category_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'CountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_adjustment"]) -> typing.Union['DateString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycle_reference"]) -> typing.Union[MetaOapg.properties.cycle_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["move_next_cycle"]) -> typing.Union[MetaOapg.properties.move_next_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "contract_id", "amount", "file", "adjustment_category_id", "vendor", "country", "date_of_adjustment", "cycle_reference", "move_next_cycle", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        adjustment_category_id: typing.Union[MetaOapg.properties.adjustment_category_id, str, ],
        country: 'CountryCode',
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        file: typing.Union[MetaOapg.properties.file, bytes, io.FileIO, io.BufferedReader, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, ],
        vendor: typing.Union[MetaOapg.properties.vendor, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        date_of_adjustment: typing.Union['DateString', schemas.Unset] = schemas.unset,
        cycle_reference: typing.Union[MetaOapg.properties.cycle_reference, str, schemas.Unset] = schemas.unset,
        move_next_cycle: typing.Union[MetaOapg.properties.move_next_cycle, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdjustmentToCreate':
        return super().__new__(
            cls,
            *args,
            adjustment_category_id=adjustment_category_id,
            country=country,
            amount=amount,
            file=file,
            contract_id=contract_id,
            vendor=vendor,
            description=description,
            title=title,
            date_of_adjustment=date_of_adjustment,
            cycle_reference=cycle_reference,
            move_next_cycle=move_next_cycle,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.country_code import CountryCode
from deel_python_sdk.model.date_string import DateString
