# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class GPContractToCreateCompensationDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "scale",
            "salary",
        }
        
        class properties:
            
            
            class scale(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "YEAR": "YEAR",
                        "MONTH": "MONTH",
                    }
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("YEAR")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
            salary = schemas.NumberSchema
        
            @staticmethod
            def currency() -> typing.Type['CurrencyCodeRequired']:
                return CurrencyCodeRequired
            __annotations__ = {
                "scale": scale,
                "salary": salary,
                "currency": currency,
            }
    
    scale: MetaOapg.properties.scale
    salary: MetaOapg.properties.salary
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scale"]) -> MetaOapg.properties.scale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'CurrencyCodeRequired': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scale", "salary", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scale"]) -> MetaOapg.properties.scale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['CurrencyCodeRequired', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scale", "salary", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scale: typing.Union[MetaOapg.properties.scale, str, ],
        salary: typing.Union[MetaOapg.properties.salary, decimal.Decimal, int, float, ],
        currency: typing.Union['CurrencyCodeRequired', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GPContractToCreateCompensationDetails':
        return super().__new__(
            cls,
            *args,
            scale=scale,
            salary=salary,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.currency_code_required import CurrencyCodeRequired
