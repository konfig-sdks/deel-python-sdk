# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class SignaturesOfBasicContract(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "worker_signed_at",
            "worker_signature",
            "client_signed_at",
        }
        
        class properties:
        
            @staticmethod
            def client_signed_at() -> typing.Type['DateTimeString']:
                return DateTimeString
            worker_signature = schemas.StrSchema
        
            @staticmethod
            def worker_signed_at() -> typing.Type['DateTimeString']:
                return DateTimeString
            __annotations__ = {
                "client_signed_at": client_signed_at,
                "worker_signature": worker_signature,
                "worker_signed_at": worker_signed_at,
            }
    
    worker_signed_at: 'DateTimeString'
    worker_signature: MetaOapg.properties.worker_signature
    client_signed_at: 'DateTimeString'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_signed_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker_signature"]) -> MetaOapg.properties.worker_signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker_signed_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_signed_at", "worker_signature", "worker_signed_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_signed_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker_signature"]) -> MetaOapg.properties.worker_signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker_signed_at"]) -> 'DateTimeString': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_signed_at", "worker_signature", "worker_signed_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        worker_signed_at: 'DateTimeString',
        worker_signature: typing.Union[MetaOapg.properties.worker_signature, str, ],
        client_signed_at: 'DateTimeString',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignaturesOfBasicContract':
        return super().__new__(
            cls,
            *args,
            worker_signed_at=worker_signed_at,
            worker_signature=worker_signature,
            client_signed_at=client_signed_at,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.date_time_string import DateTimeString
