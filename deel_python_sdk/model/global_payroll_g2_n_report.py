# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class GlobalPayrollG2NReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class net_pay(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'net_pay':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ee_loans(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ee_loans':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            contract_id = schemas.StrSchema
            
            
            class annual_bonus(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annual_bonus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class car_allowance(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'car_allowance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class esp_deduction(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'esp_deduction':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employer_cost(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employer_cost':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class funding_amount(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'funding_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class home_allowance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'home_allowance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ee_income_tax(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ee_income_tax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_number(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class backdated_salary(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'backdated_salary':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employer_contribution(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employer_contribution':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class er_occupational_risk(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'er_occupational_risk':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employment_status_tag_internal(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employment_status_tag_internal':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_job_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_job_title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_division(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_division':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_department(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_department':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pension_contribution(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pension_contribution':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cost_center(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cost_center':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "net_pay": net_pay,
                "ee_loans": ee_loans,
                "contract_id": contract_id,
                "annual_bonus": annual_bonus,
                "car_allowance": car_allowance,
                "esp_deduction": esp_deduction,
                "employee_name": employee_name,
                "employer_cost": employer_cost,
                "funding_amount": funding_amount,
                "home_allowance": home_allowance,
                "ee_income_tax": ee_income_tax,
                "employee_number": employee_number,
                "backdated_salary": backdated_salary,
                "employer_contribution": employer_contribution,
                "er_occupational_risk": er_occupational_risk,
                "employment_status_tag_internal": employment_status_tag_internal,
                "employee_job_title": employee_job_title,
                "employee_division": employee_division,
                "employee_department": employee_department,
                "pension_contribution": pension_contribution,
                "cost_center": cost_center,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> MetaOapg.properties.net_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ee_loans"]) -> MetaOapg.properties.ee_loans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_bonus"]) -> MetaOapg.properties.annual_bonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["car_allowance"]) -> MetaOapg.properties.car_allowance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["esp_deduction"]) -> MetaOapg.properties.esp_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_name"]) -> MetaOapg.properties.employee_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_cost"]) -> MetaOapg.properties.employer_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["funding_amount"]) -> MetaOapg.properties.funding_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_allowance"]) -> MetaOapg.properties.home_allowance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ee_income_tax"]) -> MetaOapg.properties.ee_income_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_number"]) -> MetaOapg.properties.employee_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backdated_salary"]) -> MetaOapg.properties.backdated_salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_contribution"]) -> MetaOapg.properties.employer_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["er_occupational_risk"]) -> MetaOapg.properties.er_occupational_risk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_status_tag_internal"]) -> MetaOapg.properties.employment_status_tag_internal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_job_title"]) -> MetaOapg.properties.employee_job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_division"]) -> MetaOapg.properties.employee_division: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_department"]) -> MetaOapg.properties.employee_department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pension_contribution"]) -> MetaOapg.properties.pension_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_center"]) -> MetaOapg.properties.cost_center: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["net_pay", "ee_loans", "contract_id", "annual_bonus", "car_allowance", "esp_deduction", "employee_name", "employer_cost", "funding_amount", "home_allowance", "ee_income_tax", "employee_number", "backdated_salary", "employer_contribution", "er_occupational_risk", "employment_status_tag_internal", "employee_job_title", "employee_division", "employee_department", "pension_contribution", "cost_center", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> typing.Union[MetaOapg.properties.net_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ee_loans"]) -> typing.Union[MetaOapg.properties.ee_loans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> typing.Union[MetaOapg.properties.contract_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_bonus"]) -> typing.Union[MetaOapg.properties.annual_bonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["car_allowance"]) -> typing.Union[MetaOapg.properties.car_allowance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["esp_deduction"]) -> typing.Union[MetaOapg.properties.esp_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_name"]) -> typing.Union[MetaOapg.properties.employee_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_cost"]) -> typing.Union[MetaOapg.properties.employer_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["funding_amount"]) -> typing.Union[MetaOapg.properties.funding_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_allowance"]) -> typing.Union[MetaOapg.properties.home_allowance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ee_income_tax"]) -> typing.Union[MetaOapg.properties.ee_income_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_number"]) -> typing.Union[MetaOapg.properties.employee_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backdated_salary"]) -> typing.Union[MetaOapg.properties.backdated_salary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_contribution"]) -> typing.Union[MetaOapg.properties.employer_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["er_occupational_risk"]) -> typing.Union[MetaOapg.properties.er_occupational_risk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_status_tag_internal"]) -> typing.Union[MetaOapg.properties.employment_status_tag_internal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_job_title"]) -> typing.Union[MetaOapg.properties.employee_job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_division"]) -> typing.Union[MetaOapg.properties.employee_division, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_department"]) -> typing.Union[MetaOapg.properties.employee_department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pension_contribution"]) -> typing.Union[MetaOapg.properties.pension_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_center"]) -> typing.Union[MetaOapg.properties.cost_center, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["net_pay", "ee_loans", "contract_id", "annual_bonus", "car_allowance", "esp_deduction", "employee_name", "employer_cost", "funding_amount", "home_allowance", "ee_income_tax", "employee_number", "backdated_salary", "employer_contribution", "er_occupational_risk", "employment_status_tag_internal", "employee_job_title", "employee_division", "employee_department", "pension_contribution", "cost_center", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        net_pay: typing.Union[MetaOapg.properties.net_pay, None, str, schemas.Unset] = schemas.unset,
        ee_loans: typing.Union[MetaOapg.properties.ee_loans, None, str, schemas.Unset] = schemas.unset,
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, schemas.Unset] = schemas.unset,
        annual_bonus: typing.Union[MetaOapg.properties.annual_bonus, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        car_allowance: typing.Union[MetaOapg.properties.car_allowance, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        esp_deduction: typing.Union[MetaOapg.properties.esp_deduction, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employee_name: typing.Union[MetaOapg.properties.employee_name, None, str, schemas.Unset] = schemas.unset,
        employer_cost: typing.Union[MetaOapg.properties.employer_cost, None, str, schemas.Unset] = schemas.unset,
        funding_amount: typing.Union[MetaOapg.properties.funding_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        home_allowance: typing.Union[MetaOapg.properties.home_allowance, None, str, schemas.Unset] = schemas.unset,
        ee_income_tax: typing.Union[MetaOapg.properties.ee_income_tax, None, str, schemas.Unset] = schemas.unset,
        employee_number: typing.Union[MetaOapg.properties.employee_number, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        backdated_salary: typing.Union[MetaOapg.properties.backdated_salary, None, str, schemas.Unset] = schemas.unset,
        employer_contribution: typing.Union[MetaOapg.properties.employer_contribution, None, str, schemas.Unset] = schemas.unset,
        er_occupational_risk: typing.Union[MetaOapg.properties.er_occupational_risk, None, str, schemas.Unset] = schemas.unset,
        employment_status_tag_internal: typing.Union[MetaOapg.properties.employment_status_tag_internal, None, str, schemas.Unset] = schemas.unset,
        employee_job_title: typing.Union[MetaOapg.properties.employee_job_title, None, str, schemas.Unset] = schemas.unset,
        employee_division: typing.Union[MetaOapg.properties.employee_division, None, str, schemas.Unset] = schemas.unset,
        employee_department: typing.Union[MetaOapg.properties.employee_department, None, str, schemas.Unset] = schemas.unset,
        pension_contribution: typing.Union[MetaOapg.properties.pension_contribution, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cost_center: typing.Union[MetaOapg.properties.cost_center, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GlobalPayrollG2NReport':
        return super().__new__(
            cls,
            *args,
            net_pay=net_pay,
            ee_loans=ee_loans,
            contract_id=contract_id,
            annual_bonus=annual_bonus,
            car_allowance=car_allowance,
            esp_deduction=esp_deduction,
            employee_name=employee_name,
            employer_cost=employer_cost,
            funding_amount=funding_amount,
            home_allowance=home_allowance,
            ee_income_tax=ee_income_tax,
            employee_number=employee_number,
            backdated_salary=backdated_salary,
            employer_contribution=employer_contribution,
            er_occupational_risk=er_occupational_risk,
            employment_status_tag_internal=employment_status_tag_internal,
            employee_job_title=employee_job_title,
            employee_division=employee_division,
            employee_department=employee_department,
            pension_contribution=pension_contribution,
            cost_center=cost_center,
            _configuration=_configuration,
            **kwargs,
        )
