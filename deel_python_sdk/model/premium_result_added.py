# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class PremiumResultAdded(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "penalties",
            "id",
            "misclassification_guarantee",
            "calculated_premium",
            "third_party_liabilities",
        }
        
        class properties:
            id = schemas.StrSchema
            calculated_premium = schemas.NumberSchema
        
            @staticmethod
            def misclassification_guarantee() -> typing.Type['PremiumResultAddedMisclassificationGuarantee']:
                return PremiumResultAddedMisclassificationGuarantee
        
            @staticmethod
            def penalties() -> typing.Type['PremiumResultAddedPenalties']:
                return PremiumResultAddedPenalties
        
            @staticmethod
            def third_party_liabilities() -> typing.Type['PremiumResultAddedThirdPartyLiabilities']:
                return PremiumResultAddedThirdPartyLiabilities
            __annotations__ = {
                "id": id,
                "calculated_premium": calculated_premium,
                "misclassification_guarantee": misclassification_guarantee,
                "penalties": penalties,
                "third_party_liabilities": third_party_liabilities,
            }
    
    penalties: 'PremiumResultAddedPenalties'
    id: MetaOapg.properties.id
    misclassification_guarantee: 'PremiumResultAddedMisclassificationGuarantee'
    calculated_premium: MetaOapg.properties.calculated_premium
    third_party_liabilities: 'PremiumResultAddedThirdPartyLiabilities'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculated_premium"]) -> MetaOapg.properties.calculated_premium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["misclassification_guarantee"]) -> 'PremiumResultAddedMisclassificationGuarantee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penalties"]) -> 'PremiumResultAddedPenalties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["third_party_liabilities"]) -> 'PremiumResultAddedThirdPartyLiabilities': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "calculated_premium", "misclassification_guarantee", "penalties", "third_party_liabilities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculated_premium"]) -> MetaOapg.properties.calculated_premium: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["misclassification_guarantee"]) -> 'PremiumResultAddedMisclassificationGuarantee': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penalties"]) -> 'PremiumResultAddedPenalties': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["third_party_liabilities"]) -> 'PremiumResultAddedThirdPartyLiabilities': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "calculated_premium", "misclassification_guarantee", "penalties", "third_party_liabilities", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        penalties: 'PremiumResultAddedPenalties',
        id: typing.Union[MetaOapg.properties.id, str, ],
        misclassification_guarantee: 'PremiumResultAddedMisclassificationGuarantee',
        calculated_premium: typing.Union[MetaOapg.properties.calculated_premium, decimal.Decimal, int, float, ],
        third_party_liabilities: 'PremiumResultAddedThirdPartyLiabilities',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PremiumResultAdded':
        return super().__new__(
            cls,
            *args,
            penalties=penalties,
            id=id,
            misclassification_guarantee=misclassification_guarantee,
            calculated_premium=calculated_premium,
            third_party_liabilities=third_party_liabilities,
            _configuration=_configuration,
            **kwargs,
        )

from deel_python_sdk.model.premium_result_added_misclassification_guarantee import PremiumResultAddedMisclassificationGuarantee
from deel_python_sdk.model.premium_result_added_penalties import PremiumResultAddedPenalties
from deel_python_sdk.model.premium_result_added_third_party_liabilities import PremiumResultAddedThirdPartyLiabilities
