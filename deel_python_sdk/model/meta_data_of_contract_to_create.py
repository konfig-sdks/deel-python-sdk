# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class MetaDataOfContractToCreate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Additional custom info about a contract
    """


    class MetaOapg:
        required = {
            "documents_required",
        }
        
        class properties:
            documents_required = schemas.BoolSchema
            is_main_income = schemas.BoolSchema
            __annotations__ = {
                "documents_required": documents_required,
                "is_main_income": is_main_income,
            }
    
    documents_required: MetaOapg.properties.documents_required
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documents_required"]) -> MetaOapg.properties.documents_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_main_income"]) -> MetaOapg.properties.is_main_income: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["documents_required", "is_main_income", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documents_required"]) -> MetaOapg.properties.documents_required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_main_income"]) -> typing.Union[MetaOapg.properties.is_main_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["documents_required", "is_main_income", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        documents_required: typing.Union[MetaOapg.properties.documents_required, bool, ],
        is_main_income: typing.Union[MetaOapg.properties.is_main_income, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetaDataOfContractToCreate':
        return super().__new__(
            cls,
            *args,
            documents_required=documents_required,
            is_main_income=is_main_income,
            _configuration=_configuration,
            **kwargs,
        )
