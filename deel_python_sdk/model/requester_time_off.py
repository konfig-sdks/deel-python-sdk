# coding: utf-8

"""
    Deel REST API

    API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deel_python_sdk import schemas  # noqa: F401


class RequesterTimeOff(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_part_time = schemas.BoolSchema
            has_reached_end_date = schemas.BoolSchema
            id = schemas.StrSchema
            uuid = schemas.StrSchema
            hris_profile_id = schemas.StrSchema
            client_profile_id = schemas.StrSchema
            organization_id = schemas.NumberSchema
            country = schemas.StrSchema
            worker_type = schemas.StrSchema
            end_date = schemas.StrSchema
            part_time_percentage = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            __annotations__ = {
                "is_part_time": is_part_time,
                "has_reached_end_date": has_reached_end_date,
                "id": id,
                "uuid": uuid,
                "hris_profile_id": hris_profile_id,
                "client_profile_id": client_profile_id,
                "organization_id": organization_id,
                "country": country,
                "worker_type": worker_type,
                "end_date": end_date,
                "part_time_percentage": part_time_percentage,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_part_time"]) -> MetaOapg.properties.is_part_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_reached_end_date"]) -> MetaOapg.properties.has_reached_end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hris_profile_id"]) -> MetaOapg.properties.hris_profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_profile_id"]) -> MetaOapg.properties.client_profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker_type"]) -> MetaOapg.properties.worker_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["part_time_percentage"]) -> MetaOapg.properties.part_time_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_part_time", "has_reached_end_date", "id", "uuid", "hris_profile_id", "client_profile_id", "organization_id", "country", "worker_type", "end_date", "part_time_percentage", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_part_time"]) -> typing.Union[MetaOapg.properties.is_part_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_reached_end_date"]) -> typing.Union[MetaOapg.properties.has_reached_end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hris_profile_id"]) -> typing.Union[MetaOapg.properties.hris_profile_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_profile_id"]) -> typing.Union[MetaOapg.properties.client_profile_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> typing.Union[MetaOapg.properties.organization_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker_type"]) -> typing.Union[MetaOapg.properties.worker_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["part_time_percentage"]) -> typing.Union[MetaOapg.properties.part_time_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_part_time", "has_reached_end_date", "id", "uuid", "hris_profile_id", "client_profile_id", "organization_id", "country", "worker_type", "end_date", "part_time_percentage", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_part_time: typing.Union[MetaOapg.properties.is_part_time, bool, schemas.Unset] = schemas.unset,
        has_reached_end_date: typing.Union[MetaOapg.properties.has_reached_end_date, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        hris_profile_id: typing.Union[MetaOapg.properties.hris_profile_id, str, schemas.Unset] = schemas.unset,
        client_profile_id: typing.Union[MetaOapg.properties.client_profile_id, str, schemas.Unset] = schemas.unset,
        organization_id: typing.Union[MetaOapg.properties.organization_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        worker_type: typing.Union[MetaOapg.properties.worker_type, str, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        part_time_percentage: typing.Union[MetaOapg.properties.part_time_percentage, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequesterTimeOff':
        return super().__new__(
            cls,
            *args,
            is_part_time=is_part_time,
            has_reached_end_date=has_reached_end_date,
            id=id,
            uuid=uuid,
            hris_profile_id=hris_profile_id,
            client_profile_id=client_profile_id,
            organization_id=organization_id,
            country=country,
            worker_type=worker_type,
            end_date=end_date,
            part_time_percentage=part_time_percentage,
            created_at=created_at,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )
